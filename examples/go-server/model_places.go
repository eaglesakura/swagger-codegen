package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Places struct {
	Attributes *interface{} `json:"attributes,omitempty"`

	BoundingBox *BoundingBox `json:"bounding_box,omitempty"`

	Country *string `json:"country,omitempty"`

	CountryCode *string `json:"country_code,omitempty"`

	FullName *string `json:"full_name,omitempty"`

	Id *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`

	PlaceType *string `json:"place_type,omitempty"`

	Url *string `json:"url,omitempty"`
}

// encode to json
func (it Places) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type PlacesArray []Places

func (it *Places) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.Attributes, it.Attributes == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.BoundingBox, it.BoundingBox == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Country, it.Country == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.CountryCode, it.CountryCode == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FullName, it.FullName == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Name, it.Name == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.PlaceType, it.PlaceType == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Url, it.Url == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Places) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *PlacesArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.Attributes, it.Attributes == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.BoundingBox, it.BoundingBox == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Country, it.Country == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.CountryCode, it.CountryCode == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FullName, it.FullName == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Name, it.Name == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.PlaceType, it.PlaceType == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Url, it.Url == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *PlacesArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
