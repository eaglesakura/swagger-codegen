package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Sleep struct {
	EndTime *string `json:"end_time,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	StartTime *string `json:"start_time,omitempty"`
}

// encode to json
func (it Sleep) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type SleepArray []Sleep

func (it *Sleep) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.EndTime, it.EndTime == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Enabled, it.Enabled == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.StartTime, it.StartTime == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Sleep) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *SleepArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.EndTime, it.EndTime == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Enabled, it.Enabled == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.StartTime, it.StartTime == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *SleepArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
