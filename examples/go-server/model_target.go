package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Target struct {
	IdStr *string `json:"id_str,omitempty"`

	Id *int32 `json:"id,omitempty"`

	FollowedBy *bool `json:"followed_by,omitempty"`

	ScreenName *string `json:"screen_name,omitempty"`

	Following *bool `json:"following,omitempty"`
}

// encode to json
func (it Target) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type TargetArray []Target

func (it *Target) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.IdStr, it.IdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FollowedBy, it.FollowedBy == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ScreenName, it.ScreenName == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Following, it.Following == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Target) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *TargetArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.IdStr, it.IdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FollowedBy, it.FollowedBy == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ScreenName, it.ScreenName == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Following, it.Following == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *TargetArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
