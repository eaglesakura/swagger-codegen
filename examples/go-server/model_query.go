package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Query struct {
	CreatedAt *string `json:"created_at,omitempty"`

	Id *int32 `json:"id,omitempty"`

	IdStr *string `json:"id_str,omitempty"`

	Name *string `json:"name,omitempty"`

	Position *string `json:"position,omitempty"`

	Query *string `json:"query,omitempty"`
}

// encode to json
func (it Query) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type QueryArray []Query

func (it *Query) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.CreatedAt, it.CreatedAt == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.IdStr, it.IdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Name, it.Name == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Position, it.Position == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Query, it.Query == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Query) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *QueryArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.CreatedAt, it.CreatedAt == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.IdStr, it.IdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Name, it.Name == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Position, it.Position == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Query, it.Query == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *QueryArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
