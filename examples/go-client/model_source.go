package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Source struct {
	CanDm *bool `json:"can_dm,omitempty"`

	Blocking *bool `json:"blocking,omitempty"`

	IdStr *bool `json:"id_str,omitempty"`

	AllReplies *bool `json:"all_replies,omitempty"`

	WantRetweets *bool `json:"want_retweets,omitempty"`

	Id *int32 `json:"id,omitempty"`

	MarkedSpam *bool `json:"marked_spam,omitempty"`

	FollowedBy *bool `json:"followed_by,omitempty"`

	NotificationsEnable *bool `json:"notifications_enable,omitempty"`

	ScreenName *string `json:"screen_name,omitempty"`

	Following *bool `json:"following,omitempty"`
}

// encode to json
func (it Source) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type SourceArray []Source

func (it *Source) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.CanDm, it.CanDm == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Blocking, it.Blocking == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.IdStr, it.IdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.AllReplies, it.AllReplies == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.WantRetweets, it.WantRetweets == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.MarkedSpam, it.MarkedSpam == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FollowedBy, it.FollowedBy == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.NotificationsEnable, it.NotificationsEnable == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ScreenName, it.ScreenName == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Following, it.Following == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Source) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *SourceArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.CanDm, it.CanDm == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Blocking, it.Blocking == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.IdStr, it.IdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.AllReplies, it.AllReplies == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.WantRetweets, it.WantRetweets == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.MarkedSpam, it.MarkedSpam == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FollowedBy, it.FollowedBy == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.NotificationsEnable, it.NotificationsEnable == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ScreenName, it.ScreenName == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Following, it.Following == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *SourceArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
