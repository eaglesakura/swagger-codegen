package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Users struct {
	ContributorsEnabled *bool `json:"contributors_enabled,omitempty"`

	CreatedAt *string `json:"created_at,omitempty"`

	DefaultProfile *bool `json:"default_profile,omitempty"`

	DefaultProfileImage *bool `json:"default_profile_image,omitempty"`

	Description *string `json:"description,omitempty"`

	Entities *Entities `json:"entities,omitempty"`

	FavoritesCount *int32 `json:"favorites_count,omitempty"`

	FollowRequestSent *bool `json:"follow_request_sent,omitempty"`

	Following *bool `json:"following,omitempty"`

	FollowersCount *int32 `json:"followers_count,omitempty"`

	FriendsCount *int32 `json:"friends_count,omitempty"`

	GeoEnabled *bool `json:"geo_enabled,omitempty"`

	Id *int32 `json:"id,omitempty"`

	IdStr *string `json:"id_str,omitempty"`

	IsTranslator *bool `json:"is_translator,omitempty"`

	Lang *string `json:"lang,omitempty"`

	ListedCount *int32 `json:"listed_count,omitempty"`

	Location *string `json:"location,omitempty"`

	Name *string `json:"name,omitempty"`

	Notifications *bool `json:"notifications,omitempty"`

	ProfileBackgroundColor *string `json:"profile_background_color,omitempty"`

	ProfileBackgroundImageUrl *string `json:"profile_background_image_url,omitempty"`

	ProfileBackgroundImageUrlHttps *string `json:"profile_background_image_url_https,omitempty"`

	ProfileBackgroundTile *string `json:"profile_background_tile,omitempty"`

	ProfileBannerUrl *string `json:"profile_banner_url,omitempty"`

	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	ProfileImageUrlHttps *string `json:"profile_image_url_https,omitempty"`

	ProfileLinkColor *string `json:"profile_link_color,omitempty"`

	ProfileSidebarBorderColor *string `json:"profile_sidebar_border_color,omitempty"`

	ProfileSidebarFillColor *string `json:"profile_sidebar_fill_color,omitempty"`

	ProfileTextColor *string `json:"profile_text_color,omitempty"`

	ProfileUseBackgroundImage *bool `json:"profile_use_background_image,omitempty"`

	Protected *bool `json:"protected,omitempty"`

	ScreenName *string `json:"screen_name,omitempty"`

	ShowAllInlineMedia *bool `json:"show_all_inline_media,omitempty"`

	Status *Tweets `json:"status,omitempty"`

	StatusesCount *int32 `json:"statuses_count,omitempty"`

	TimeZone *string `json:"time_zone,omitempty"`

	Url *string `json:"url,omitempty"`

	UtcOffset *int32 `json:"utc_offset,omitempty"`

	Verified *bool `json:"verified,omitempty"`

	WithheldInCountries *string `json:"withheld_in_countries,omitempty"`

	WithheldScope *string `json:"withheld_scope,omitempty"`
}

// encode to json
func (it Users) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type UsersArray []Users

func (it *Users) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.ContributorsEnabled, it.ContributorsEnabled == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.CreatedAt, it.CreatedAt == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.DefaultProfile, it.DefaultProfile == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.DefaultProfileImage, it.DefaultProfileImage == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Description, it.Description == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Entities, it.Entities == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FavoritesCount, it.FavoritesCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FollowRequestSent, it.FollowRequestSent == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Following, it.Following == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FollowersCount, it.FollowersCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FriendsCount, it.FriendsCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.GeoEnabled, it.GeoEnabled == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.IdStr, it.IdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.IsTranslator, it.IsTranslator == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Lang, it.Lang == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ListedCount, it.ListedCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Location, it.Location == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Name, it.Name == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Notifications, it.Notifications == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileBackgroundColor, it.ProfileBackgroundColor == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileBackgroundImageUrl, it.ProfileBackgroundImageUrl == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileBackgroundImageUrlHttps, it.ProfileBackgroundImageUrlHttps == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileBackgroundTile, it.ProfileBackgroundTile == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileBannerUrl, it.ProfileBannerUrl == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileImageUrl, it.ProfileImageUrl == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileImageUrlHttps, it.ProfileImageUrlHttps == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileLinkColor, it.ProfileLinkColor == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileSidebarBorderColor, it.ProfileSidebarBorderColor == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileSidebarFillColor, it.ProfileSidebarFillColor == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileTextColor, it.ProfileTextColor == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ProfileUseBackgroundImage, it.ProfileUseBackgroundImage == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Protected, it.Protected == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ScreenName, it.ScreenName == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ShowAllInlineMedia, it.ShowAllInlineMedia == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Status, it.Status == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.StatusesCount, it.StatusesCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.TimeZone, it.TimeZone == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Url, it.Url == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.UtcOffset, it.UtcOffset == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Verified, it.Verified == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.WithheldInCountries, it.WithheldInCountries == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.WithheldScope, it.WithheldScope == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Users) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *UsersArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.ContributorsEnabled, it.ContributorsEnabled == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.CreatedAt, it.CreatedAt == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.DefaultProfile, it.DefaultProfile == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.DefaultProfileImage, it.DefaultProfileImage == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Description, it.Description == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Entities, it.Entities == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FavoritesCount, it.FavoritesCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FollowRequestSent, it.FollowRequestSent == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Following, it.Following == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FollowersCount, it.FollowersCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FriendsCount, it.FriendsCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.GeoEnabled, it.GeoEnabled == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.IdStr, it.IdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.IsTranslator, it.IsTranslator == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Lang, it.Lang == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ListedCount, it.ListedCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Location, it.Location == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Name, it.Name == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Notifications, it.Notifications == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileBackgroundColor, it.ProfileBackgroundColor == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileBackgroundImageUrl, it.ProfileBackgroundImageUrl == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileBackgroundImageUrlHttps, it.ProfileBackgroundImageUrlHttps == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileBackgroundTile, it.ProfileBackgroundTile == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileBannerUrl, it.ProfileBannerUrl == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileImageUrl, it.ProfileImageUrl == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileImageUrlHttps, it.ProfileImageUrlHttps == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileLinkColor, it.ProfileLinkColor == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileSidebarBorderColor, it.ProfileSidebarBorderColor == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileSidebarFillColor, it.ProfileSidebarFillColor == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileTextColor, it.ProfileTextColor == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ProfileUseBackgroundImage, it.ProfileUseBackgroundImage == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Protected, it.Protected == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ScreenName, it.ScreenName == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ShowAllInlineMedia, it.ShowAllInlineMedia == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Status, it.Status == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.StatusesCount, it.StatusesCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.TimeZone, it.TimeZone == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Url, it.Url == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.UtcOffset, it.UtcOffset == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Verified, it.Verified == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.WithheldInCountries, it.WithheldInCountries == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.WithheldScope, it.WithheldScope == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *UsersArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
