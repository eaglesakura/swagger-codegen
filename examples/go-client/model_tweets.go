package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Tweets struct {
	Contributors *ContributorsArray `json:"contributors,omitempty"`

	Coordinates *Coordinates `json:"coordinates,omitempty"`

	CreatedAt *string `json:"created_at,omitempty"`

	CurrentUserRetweet *Tweets `json:"current_user_retweet,omitempty"`

	Entities *Entities `json:"entities,omitempty"`

	FavoriteCount *int32 `json:"favorite_count,omitempty"`

	Favorited *bool `json:"favorited,omitempty"`

	FilterLevel *string `json:"filter_level,omitempty"`

	Id *int32 `json:"id,omitempty"`

	IdStr *string `json:"id_str,omitempty"`

	InReplyToScreenName *string `json:"in_reply_to_screen_name,omitempty"`

	InReplyToStatusId *int32 `json:"in_reply_to_status_id,omitempty"`

	InReplyToStatusIdStr *string `json:"in_reply_to_status_id_str,omitempty"`

	InReplyToUserId *int32 `json:"in_reply_to_user_id,omitempty"`

	InReplyToUserIdStr *string `json:"in_reply_to_user_id_str,omitempty"`

	Lang *string `json:"lang,omitempty"`

	Place *Places `json:"place,omitempty"`

	PossiblySensitive *bool `json:"possibly_sensitive,omitempty"`

	QuotedStatusId *int32 `json:"quoted_status_id,omitempty"`

	QuotedStatusIdStr *string `json:"quoted_status_id_str,omitempty"`

	QuotedStatus *Tweets `json:"quoted_status,omitempty"`

	Scopes *interface{} `json:"scopes,omitempty"`

	RetweetCount *int32 `json:"retweet_count,omitempty"`

	Retweeted *bool `json:"retweeted,omitempty"`

	RetweetedStatus *Tweets `json:"retweeted_status,omitempty"`

	Source *string `json:"source,omitempty"`

	Text *string `json:"text,omitempty"`

	Truncated *string `json:"truncated,omitempty"`

	User *Users `json:"user,omitempty"`

	WithheldCopyright *bool `json:"withheld_copyright,omitempty"`

	WithheldCountries *[]string `json:"withheld_countries,omitempty"`

	WithheldScope *string `json:"withheld_scope,omitempty"`
}

// encode to json
func (it Tweets) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type TweetsArray []Tweets

func (it *Tweets) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.Contributors, it.Contributors == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Coordinates, it.Coordinates == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.CreatedAt, it.CreatedAt == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.CurrentUserRetweet, it.CurrentUserRetweet == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Entities, it.Entities == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FavoriteCount, it.FavoriteCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Favorited, it.Favorited == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.FilterLevel, it.FilterLevel == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.IdStr, it.IdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.InReplyToScreenName, it.InReplyToScreenName == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.InReplyToStatusId, it.InReplyToStatusId == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.InReplyToStatusIdStr, it.InReplyToStatusIdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.InReplyToUserId, it.InReplyToUserId == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.InReplyToUserIdStr, it.InReplyToUserIdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Lang, it.Lang == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Place, it.Place == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.PossiblySensitive, it.PossiblySensitive == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.QuotedStatusId, it.QuotedStatusId == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.QuotedStatusIdStr, it.QuotedStatusIdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.QuotedStatus, it.QuotedStatus == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Scopes, it.Scopes == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.RetweetCount, it.RetweetCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Retweeted, it.Retweeted == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.RetweetedStatus, it.RetweetedStatus == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Source, it.Source == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Text, it.Text == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Truncated, it.Truncated == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.User, it.User == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.WithheldCopyright, it.WithheldCopyright == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.WithheldCountries, it.WithheldCountries == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.WithheldScope, it.WithheldScope == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Tweets) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *TweetsArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.Contributors, it.Contributors == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Coordinates, it.Coordinates == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.CreatedAt, it.CreatedAt == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.CurrentUserRetweet, it.CurrentUserRetweet == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Entities, it.Entities == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FavoriteCount, it.FavoriteCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Favorited, it.Favorited == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.FilterLevel, it.FilterLevel == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.IdStr, it.IdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.InReplyToScreenName, it.InReplyToScreenName == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.InReplyToStatusId, it.InReplyToStatusId == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.InReplyToStatusIdStr, it.InReplyToStatusIdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.InReplyToUserId, it.InReplyToUserId == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.InReplyToUserIdStr, it.InReplyToUserIdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Lang, it.Lang == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Place, it.Place == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.PossiblySensitive, it.PossiblySensitive == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.QuotedStatusId, it.QuotedStatusId == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.QuotedStatusIdStr, it.QuotedStatusIdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.QuotedStatus, it.QuotedStatus == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Scopes, it.Scopes == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.RetweetCount, it.RetweetCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Retweeted, it.Retweeted == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.RetweetedStatus, it.RetweetedStatus == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Source, it.Source == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Text, it.Text == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Truncated, it.Truncated == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.User, it.User == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.WithheldCopyright, it.WithheldCopyright == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.WithheldCountries, it.WithheldCountries == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.WithheldScope, it.WithheldScope == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *TweetsArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
