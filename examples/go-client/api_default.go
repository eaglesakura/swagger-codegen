package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"github.com/eaglesakura/swagger-go-core"
	"github.com/eaglesakura/swagger-go-core/errors"
	"github.com/eaglesakura/swagger-go-core/utils"
	"net/url"
	"strings"
)

const DefaultApi_BasePath string = "/1.1"

type DefaultApi struct {
	BasePath string
}

func NewDefaultApi() *DefaultApi {
	return &DefaultApi{
		BasePath: DefaultApi_BasePath,
	}
}

/*
   returns settings for user
   returns settings for user
*/
type DefaultApiAccountSettingsGetRequest struct {
}

/*
   returns settings for user
   returns settings for user

     result: Settings
*/
func (it *DefaultApi) AccountSettingsGet(_client swagger.FetchClient, _request *DefaultApiAccountSettingsGetRequest, result *Settings) error {

	// create path and map variables
	{
		localVarPath := strings.Replace("/account/settings", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*
   updates user&#39;s settings
   updates user&#39;s settings
*/
type DefaultApiAccountSettingsPostRequest struct {
	/*
	   the Yahoo! Where On Earth ID to user as defaul tend location
	*/
	TrendLocationWoeid *string

	/*
	   enables/disables sleep time, silencing notifications
	*/
	SleepTimeEnabled *string

	/*
	   the hour that sleep time should begin if enabled
	*/
	StartSleepTime *string

	/*
	   the hour that sleep time should end if enabled
	*/
	EndSleepTime *string

	/*
	   timezone dates and times should be displayed in
	*/
	TimeZone *string

	/*
	   language which Twitter should render in for the user
	*/
	Lang *string
}

/*
   updates user&#39;s settings
   updates user&#39;s settings

     result: Settings
*/
func (it *DefaultApi) AccountSettingsPost(_client swagger.FetchClient, _request *DefaultApiAccountSettingsPostRequest, result *Settings) error {
	if !_client.NewValidator(_request.TrendLocationWoeid, _request.TrendLocationWoeid == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrendLocationWoeid' when calling AccountSettingsPost")
	}
	if !_client.NewValidator(_request.SleepTimeEnabled, _request.SleepTimeEnabled == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SleepTimeEnabled' when calling AccountSettingsPost")
	}
	if !_client.NewValidator(_request.StartSleepTime, _request.StartSleepTime == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'StartSleepTime' when calling AccountSettingsPost")
	}
	if !_client.NewValidator(_request.EndSleepTime, _request.EndSleepTime == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'EndSleepTime' when calling AccountSettingsPost")
	}
	if !_client.NewValidator(_request.TimeZone, _request.TimeZone == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TimeZone' when calling AccountSettingsPost")
	}
	if !_client.NewValidator(_request.Lang, _request.Lang == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lang' when calling AccountSettingsPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/account/settings", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.TrendLocationWoeid != nil {
		_client.AddQueryParam("trend_location_woeid", utils.ParameterToString(_request.TrendLocationWoeid))
	}
	if _request.SleepTimeEnabled != nil {
		_client.AddQueryParam("sleep_time_enabled", utils.ParameterToString(_request.SleepTimeEnabled))
	}
	if _request.StartSleepTime != nil {
		_client.AddQueryParam("start_sleep_time", utils.ParameterToString(_request.StartSleepTime))
	}
	if _request.EndSleepTime != nil {
		_client.AddQueryParam("end_sleep_time", utils.ParameterToString(_request.EndSleepTime))
	}
	if _request.TimeZone != nil {
		_client.AddQueryParam("time_zone", utils.ParameterToString(_request.TimeZone))
	}
	if _request.Lang != nil {
		_client.AddQueryParam("lang", utils.ParameterToString(_request.Lang))
	}

	return _client.Fetch(result)
}

/*
   sets which device Twitter delivers updates to for user
   sets which device Twitter delivers updates to for user
*/
type DefaultApiAccountUpdateDeliveryDevicePostRequest struct {
	/*
	   must be one of sms, none
	*/
	Device *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string
}

/*
   sets which device Twitter delivers updates to for user
   sets which device Twitter delivers updates to for user

     result: Settings
*/
func (it *DefaultApi) AccountUpdateDeliveryDevicePost(_client swagger.FetchClient, _request *DefaultApiAccountUpdateDeliveryDevicePostRequest, result *Settings) error {
	if !_client.NewValidator(_request.Device, _request.Device == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Device' when calling AccountUpdateDeliveryDevicePost")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling AccountUpdateDeliveryDevicePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/account/update_delivery_device", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Device != nil {
		_client.AddQueryParam("device", utils.ParameterToString(_request.Device))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}

	return _client.Fetch(result)
}

/*
   updates user&#39;s profile background image
   updates user&#39;s profile background image
*/
type DefaultApiAccountUpdateProfileBackgroundImagePostRequest struct {
	/*
	   image to replace background image of profile
	*/
	File *[]byte

	/*
	   whether or not to tile background image
	*/
	Tile *string

	/*
	   display background image or not
	*/
	Use *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to include status in returned user objects
	*/
	SkipStatus *string
}

/*
   updates user&#39;s profile background image
   updates user&#39;s profile background image

     result: Settings
*/
func (it *DefaultApi) AccountUpdateProfileBackgroundImagePost(_client swagger.FetchClient, _request *DefaultApiAccountUpdateProfileBackgroundImagePostRequest, result *Settings) error {
	if !_client.NewValidator(_request.File, _request.File == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'File' when calling AccountUpdateProfileBackgroundImagePost")
	}
	if !_client.NewValidator(_request.Tile, _request.Tile == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Tile' when calling AccountUpdateProfileBackgroundImagePost")
	}
	if !_client.NewValidator(_request.Use, _request.Use == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Use' when calling AccountUpdateProfileBackgroundImagePost")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling AccountUpdateProfileBackgroundImagePost")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling AccountUpdateProfileBackgroundImagePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/account/update_profile_background_image", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Tile != nil {
		_client.AddQueryParam("tile", utils.ParameterToString(_request.Tile))
	}
	if _request.Use != nil {
		_client.AddQueryParam("use", utils.ParameterToString(_request.Use))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*
   sets one or more hex values that controls color scheme
   sets one or more hex values that controls color scheme
*/
type DefaultApiAccountUpdateProfileColorsPostRequest struct {
	/*
	   profile background color
	*/
	ProfileBackgroundColor *string

	/*
	   profile link color
	*/
	ProfileLinkColor *string

	/*
	   profile sidebar&#39;s border color
	*/
	ProfileSidebarBorderColor *string

	/*
	   profile&#39;s sidebar background color
	*/
	ProfileSidebarFillColor *string

	/*
	   profile text color
	*/
	ProfileTextColor *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to include statuses
	*/
	SkipStatus *string
}

/*
   sets one or more hex values that controls color scheme
   sets one or more hex values that controls color scheme

     result: Settings
*/
func (it *DefaultApi) AccountUpdateProfileColorsPost(_client swagger.FetchClient, _request *DefaultApiAccountUpdateProfileColorsPostRequest, result *Settings) error {
	if !_client.NewValidator(_request.ProfileBackgroundColor, _request.ProfileBackgroundColor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ProfileBackgroundColor' when calling AccountUpdateProfileColorsPost")
	}
	if !_client.NewValidator(_request.ProfileLinkColor, _request.ProfileLinkColor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ProfileLinkColor' when calling AccountUpdateProfileColorsPost")
	}
	if !_client.NewValidator(_request.ProfileSidebarBorderColor, _request.ProfileSidebarBorderColor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ProfileSidebarBorderColor' when calling AccountUpdateProfileColorsPost")
	}
	if !_client.NewValidator(_request.ProfileSidebarFillColor, _request.ProfileSidebarFillColor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ProfileSidebarFillColor' when calling AccountUpdateProfileColorsPost")
	}
	if !_client.NewValidator(_request.ProfileTextColor, _request.ProfileTextColor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ProfileTextColor' when calling AccountUpdateProfileColorsPost")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling AccountUpdateProfileColorsPost")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling AccountUpdateProfileColorsPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/account/update_profile_colors", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ProfileBackgroundColor != nil {
		_client.AddQueryParam("profile_background_color", utils.ParameterToString(_request.ProfileBackgroundColor))
	}
	if _request.ProfileLinkColor != nil {
		_client.AddQueryParam("profile_link_color", utils.ParameterToString(_request.ProfileLinkColor))
	}
	if _request.ProfileSidebarBorderColor != nil {
		_client.AddQueryParam("profile_sidebar_border_color", utils.ParameterToString(_request.ProfileSidebarBorderColor))
	}
	if _request.ProfileSidebarFillColor != nil {
		_client.AddQueryParam("profile_sidebar_fill_color", utils.ParameterToString(_request.ProfileSidebarFillColor))
	}
	if _request.ProfileTextColor != nil {
		_client.AddQueryParam("profile_text_color", utils.ParameterToString(_request.ProfileTextColor))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*
   updates user&#39;s profile image
   updates user&#39;s profile image
*/
type DefaultApiAccountUpdateProfileImagePostRequest struct {
	/*
	   image to be set as profile image
	*/
	Image *[]byte

	/*
	   whether or not to include statuses
	*/
	SkipStatus *string
}

/*
   updates user&#39;s profile image
   updates user&#39;s profile image

     result: Settings
*/
func (it *DefaultApi) AccountUpdateProfileImagePost(_client swagger.FetchClient, _request *DefaultApiAccountUpdateProfileImagePostRequest, result *Settings) error {
	if !_client.NewValidator(_request.Image, _request.Image == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Image' when calling AccountUpdateProfileImagePost")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling AccountUpdateProfileImagePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/account/update_profile_image", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*
   sets values that users ar eable to set under Account tab
   sets values that users ar eable to set under Account tab
*/
type DefaultApiAccountUpdateProfilePostRequest struct {
	/*
	   full name of profile
	*/
	Name *string

	/*
	   url associated with profile
	*/
	Url *string

	/*
	   city or country describing where user of account is.
	*/
	Location *string

	/*
	   a description of user owning account
	*/
	Description *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to include statuses in response
	*/
	SkipStatus *string
}

/*
   sets values that users ar eable to set under Account tab
   sets values that users ar eable to set under Account tab

     result: Settings
*/
func (it *DefaultApi) AccountUpdateProfilePost(_client swagger.FetchClient, _request *DefaultApiAccountUpdateProfilePostRequest, result *Settings) error {
	if !_client.NewValidator(_request.Name, _request.Name == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Name' when calling AccountUpdateProfilePost")
	}
	if !_client.NewValidator(_request.Url, _request.Url == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Url' when calling AccountUpdateProfilePost")
	}
	if !_client.NewValidator(_request.Location, _request.Location == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Location' when calling AccountUpdateProfilePost")
	}
	if !_client.NewValidator(_request.Description, _request.Description == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Description' when calling AccountUpdateProfilePost")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling AccountUpdateProfilePost")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling AccountUpdateProfilePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/account/update_profile", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Name != nil {
		_client.AddQueryParam("name", utils.ParameterToString(_request.Name))
	}
	if _request.Url != nil {
		_client.AddQueryParam("url", utils.ParameterToString(_request.Url))
	}
	if _request.Location != nil {
		_client.AddQueryParam("location", utils.ParameterToString(_request.Location))
	}
	if _request.Description != nil {
		_client.AddQueryParam("description", utils.ParameterToString(_request.Description))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*

   Returns the current rate limits for methods belonging to the specified resource families
*/
type DefaultApiApplicationRateLimitStatusGetRequest struct {
	/*
	   A comma-separated list of resource families you want to know the current rate limit disposition for
	*/
	Resources *[]string
}

/*

   Returns the current rate limits for methods belonging to the specified resource families

     result: void
*/
func (it *DefaultApi) ApplicationRateLimitStatusGet(_client swagger.FetchClient, _request *DefaultApiApplicationRateLimitStatusGetRequest, result interface{}) error {
	if !_client.NewValidator(_request.Resources, _request.Resources == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Resources' when calling ApplicationRateLimitStatusGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/application/rate_limit_status", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Resources != nil {
		_client.AddQueryParam("resources", utils.ParameterToString(_request.Resources))
	}

	return _client.Fetch(result)
}

/*
   blocks the specified user
   blocks the specified user
*/
type DefaultApiBlocksCreatePostRequest struct {
	/*
	   screen name of user to be blocked
	*/
	ScreenName *string

	/*
	   ID of user to be blocked
	*/
	UserId *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to skip statuses
	*/
	SkipStatus *string
}

/*
   blocks the specified user
   blocks the specified user

     result: Users
*/
func (it *DefaultApi) BlocksCreatePost(_client swagger.FetchClient, _request *DefaultApiBlocksCreatePostRequest, result *Users) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling BlocksCreatePost")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling BlocksCreatePost")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling BlocksCreatePost")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling BlocksCreatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/blocks/create", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*
   un-blocks the specified user
   un-blocks the specified user
*/
type DefaultApiBlocksDestroyPostRequest struct {
	/*
	   screen name of user to be un-blocked
	*/
	ScreenName *string

	/*
	   ID of user to be un-blocked
	*/
	UserId *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to skip statuses
	*/
	SkipStatus *string
}

/*
   un-blocks the specified user
   un-blocks the specified user

     result: Users
*/
func (it *DefaultApi) BlocksDestroyPost(_client swagger.FetchClient, _request *DefaultApiBlocksDestroyPostRequest, result *Users) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling BlocksDestroyPost")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling BlocksDestroyPost")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling BlocksDestroyPost")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling BlocksDestroyPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/blocks/destroy", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*
   returns array of numeric user ids of blocked users
   returns array of numeric user ids of blocked users
*/
type DefaultApiBlocksIdsGetRequest struct {
	/*
	   returns array of numeric IDs as string IDs
	*/
	StringifyIds *string

	/*
	   breaks up block of user IDs into pages
	*/
	Cursor *string
}

/*
   returns array of numeric user ids of blocked users
   returns array of numeric user ids of blocked users

     result: CursorUsers
*/
func (it *DefaultApi) BlocksIdsGet(_client swagger.FetchClient, _request *DefaultApiBlocksIdsGetRequest, result *CursorUsers) error {
	if !_client.NewValidator(_request.StringifyIds, _request.StringifyIds == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'StringifyIds' when calling BlocksIdsGet")
	}
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling BlocksIdsGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/blocks/ids", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.StringifyIds != nil {
		_client.AddQueryParam("stringify_ids", utils.ParameterToString(_request.StringifyIds))
	}
	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}

	return _client.Fetch(result)
}

/*
   disallows retweets and device notifications from a user
   disallows retweets and device notifications from a user
*/
type DefaultApiBlocksListGetRequest struct {
	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to include statuses in response
	*/
	SkipStatus *string

	/*
	   breaks block of user to be broken up into pages
	*/
	Cursor *string
}

/*
   disallows retweets and device notifications from a user
   disallows retweets and device notifications from a user

     result: CursorUsers
*/
func (it *DefaultApi) BlocksListGet(_client swagger.FetchClient, _request *DefaultApiBlocksListGetRequest, result *CursorUsers) error {
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling BlocksListGet")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling BlocksListGet")
	}
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling BlocksListGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/blocks/list", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}
	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}

	return _client.Fetch(result)
}

/*

   destroys direct messages specified in required ID
*/
type DefaultApiDirectMessagesDestroyPostRequest struct {
	/*
	   ID of direct message to delete
	*/
	Id *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string
}

/*

   destroys direct messages specified in required ID

     result: Messages
*/
func (it *DefaultApi) DirectMessagesDestroyPost(_client swagger.FetchClient, _request *DefaultApiDirectMessagesDestroyPostRequest, result *Messages) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling DirectMessagesDestroyPost")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling DirectMessagesDestroyPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/direct_messages/destroy", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Id != nil {
		_client.AddQueryParam("id", utils.ParameterToString(_request.Id))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}

	return _client.Fetch(result)
}

/*

   return 20 most recent direct messages sent to user
*/
type DefaultApiDirectMessagesGetRequest struct {
	/*
	   return results with ID greater than specified
	*/
	SinceId *string

	/*
	   returns results with an ID less than/equal to specified ID
	*/
	MaxId *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to include status
	*/
	SkipStatus *string
}

/*

   return 20 most recent direct messages sent to user

     result: MessagesArray
*/
func (it *DefaultApi) DirectMessagesGet(_client swagger.FetchClient, _request *DefaultApiDirectMessagesGetRequest, result *MessagesArray) error {
	if !_client.NewValidator(_request.SinceId, _request.SinceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SinceId' when calling DirectMessagesGet")
	}
	if !_client.NewValidator(_request.MaxId, _request.MaxId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'MaxId' when calling DirectMessagesGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling DirectMessagesGet")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling DirectMessagesGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/direct_messages", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.SinceId != nil {
		_client.AddQueryParam("since_id", utils.ParameterToString(_request.SinceId))
	}
	if _request.MaxId != nil {
		_client.AddQueryParam("max_id", utils.ParameterToString(_request.MaxId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*

   sends a new direct message to specified user
*/
type DefaultApiDirectMessagesNewPostRequest struct {
	/*
	   description
	*/
	UserId *string

	/*
	   text of your direct message
	*/
	Text *string

	/*
	   screen name of user receiving message
	*/
	ScreenName *string
}

/*

   sends a new direct message to specified user

     result: Messages
*/
func (it *DefaultApi) DirectMessagesNewPost(_client swagger.FetchClient, _request *DefaultApiDirectMessagesNewPostRequest, result *Messages) error {
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling DirectMessagesNewPost")
	}
	if !_client.NewValidator(_request.Text, _request.Text == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Text' when calling DirectMessagesNewPost")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling DirectMessagesNewPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/direct_messages/new", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.Text != nil {
		_client.AddQueryParam("text", utils.ParameterToString(_request.Text))
	}

	return _client.Fetch(result)
}

/*

   return 20 most recent direct messages sent
*/
type DefaultApiDirectMessagesSentGetRequest struct {
	/*

	 */
	SinceId *string

	/*

	 */
	MaxId *string

	/*

	 */
	Count *string

	/*

	 */
	Page *string

	/*

	 */
	IncludeEntities *string
}

/*

   return 20 most recent direct messages sent

     result: MessagesArray
*/
func (it *DefaultApi) DirectMessagesSentGet(_client swagger.FetchClient, _request *DefaultApiDirectMessagesSentGetRequest, result *MessagesArray) error {
	if !_client.NewValidator(_request.SinceId, _request.SinceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SinceId' when calling DirectMessagesSentGet")
	}
	if !_client.NewValidator(_request.MaxId, _request.MaxId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'MaxId' when calling DirectMessagesSentGet")
	}
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling DirectMessagesSentGet")
	}
	if !_client.NewValidator(_request.Page, _request.Page == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Page' when calling DirectMessagesSentGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling DirectMessagesSentGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/direct_messages/sent", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.SinceId != nil {
		_client.AddQueryParam("since_id", utils.ParameterToString(_request.SinceId))
	}
	if _request.MaxId != nil {
		_client.AddQueryParam("max_id", utils.ParameterToString(_request.MaxId))
	}
	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}
	if _request.Page != nil {
		_client.AddQueryParam("page", utils.ParameterToString(_request.Page))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}

	return _client.Fetch(result)
}

/*

   returns a single direct message specified by an id
*/
type DefaultApiDirectMessagesShowGetRequest struct {
	/*
	   ID of direct message
	*/
	Id *string
}

/*

   returns a single direct message specified by an id

     result: MessagesArray
*/
func (it *DefaultApi) DirectMessagesShowGet(_client swagger.FetchClient, _request *DefaultApiDirectMessagesShowGetRequest, result *MessagesArray) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling DirectMessagesShowGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/direct_messages/show", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Id != nil {
		_client.AddQueryParam("id", utils.ParameterToString(_request.Id))
	}

	return _client.Fetch(result)
}

/*

   returns a cursored collection of user IDs following the user
*/
type DefaultApiFollowersIdsGetRequest struct {
	/*
	   ID of user for whom to return results for
	*/
	UserId *string

	/*
	   screen name of user for whom to return results for
	*/
	ScreenName *string

	/*
	   causes list of connections to be broken in pages
	*/
	Cursor *string

	/*
	   IDs converted to strings
	*/
	StringifyIds *string

	/*
	   number of IDs to attempt retrieval of
	*/
	Count *string
}

/*

   returns a cursored collection of user IDs following the user

     result: CursorIds
*/
func (it *DefaultApi) FollowersIdsGet(_client swagger.FetchClient, _request *DefaultApiFollowersIdsGetRequest, result *CursorIds) error {
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling FollowersIdsGet")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling FollowersIdsGet")
	}
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling FollowersIdsGet")
	}
	if !_client.NewValidator(_request.StringifyIds, _request.StringifyIds == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'StringifyIds' when calling FollowersIdsGet")
	}
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling FollowersIdsGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/followers/ids", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}
	if _request.StringifyIds != nil {
		_client.AddQueryParam("stringify_ids", utils.ParameterToString(_request.StringifyIds))
	}
	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}

	return _client.Fetch(result)
}

/*

   returns a cursored collection of user IDs followed by user
*/
type DefaultApiFriendsIdsGetRequest struct {
	/*
	   ID of user for whom to return results for
	*/
	UserId *string

	/*
	   screen name of user for whom to return results for
	*/
	ScreenName *string

	/*
	   causes list of connections to be broken in pages
	*/
	Cursor *string

	/*
	   IDs converted to strings
	*/
	StringifyIds *string

	/*
	   number of IDs to attempt retrieval of
	*/
	Count *string
}

/*

   returns a cursored collection of user IDs followed by user

     result: CursorIds
*/
func (it *DefaultApi) FriendsIdsGet(_client swagger.FetchClient, _request *DefaultApiFriendsIdsGetRequest, result *CursorIds) error {
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling FriendsIdsGet")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling FriendsIdsGet")
	}
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling FriendsIdsGet")
	}
	if !_client.NewValidator(_request.StringifyIds, _request.StringifyIds == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'StringifyIds' when calling FriendsIdsGet")
	}
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling FriendsIdsGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/friends/ids", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}
	if _request.StringifyIds != nil {
		_client.AddQueryParam("stringify_ids", utils.ParameterToString(_request.StringifyIds))
	}
	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}

	return _client.Fetch(result)
}

/*

   allows users to follow user sepcified by ID
*/
type DefaultApiFriendshipsCreatePostRequest struct {
	/*
	   screen name of user for whom to befriend
	*/
	ScreenName *string

	/*
	   ID of user for whom to befriend
	*/
	UserId *string

	/*
	   enable notifications for target user
	*/
	Follow *string
}

/*

   allows users to follow user sepcified by ID

     result: Users
*/
func (it *DefaultApi) FriendshipsCreatePost(_client swagger.FetchClient, _request *DefaultApiFriendshipsCreatePostRequest, result *Users) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling FriendshipsCreatePost")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling FriendshipsCreatePost")
	}
	if !_client.NewValidator(_request.Follow, _request.Follow == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Follow' when calling FriendshipsCreatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/friendships/create", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.Follow != nil {
		_client.AddQueryParam("follow", utils.ParameterToString(_request.Follow))
	}

	return _client.Fetch(result)
}

/*

   allows user to unfollow user psecified by ID
*/
type DefaultApiFriendshipsDestroyPostRequest struct {
	/*
	   screen name of user for whom to befriend
	*/
	ScreenName *string

	/*
	   ID of user for whom to befriend
	*/
	UserId *string
}

/*

   allows user to unfollow user psecified by ID

     result: Users
*/
func (it *DefaultApi) FriendshipsDestroyPost(_client swagger.FetchClient, _request *DefaultApiFriendshipsDestroyPostRequest, result *Users) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling FriendshipsDestroyPost")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling FriendshipsDestroyPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/friendships/destroy", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}

	return _client.Fetch(result)
}

/*

   returns collection of IDs of users with pending follow request
*/
type DefaultApiFriendshipsIncomingGetRequest struct {
	/*
	   causes list of connections to be broken in pages
	*/
	Cursor *string

	/*
	   IDs converted to strings
	*/
	StringifyIds *string
}

/*

   returns collection of IDs of users with pending follow request

     result: CursorIds
*/
func (it *DefaultApi) FriendshipsIncomingGet(_client swagger.FetchClient, _request *DefaultApiFriendshipsIncomingGetRequest, result *CursorIds) error {
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling FriendshipsIncomingGet")
	}
	if !_client.NewValidator(_request.StringifyIds, _request.StringifyIds == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'StringifyIds' when calling FriendshipsIncomingGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/friendships/incoming", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}
	if _request.StringifyIds != nil {
		_client.AddQueryParam("stringify_ids", utils.ParameterToString(_request.StringifyIds))
	}

	return _client.Fetch(result)
}

/*

   returns collection of IDs of users with pending follow request from the user
*/
type DefaultApiFriendshipsOutgoingGetRequest struct {
	/*
	   causes list of connections to be broken in pages
	*/
	Cursor *string

	/*
	   IDs converted to strings
	*/
	StringifyIds *string
}

/*

   returns collection of IDs of users with pending follow request from the user

     result: CursorIds
*/
func (it *DefaultApi) FriendshipsOutgoingGet(_client swagger.FetchClient, _request *DefaultApiFriendshipsOutgoingGetRequest, result *CursorIds) error {
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling FriendshipsOutgoingGet")
	}
	if !_client.NewValidator(_request.StringifyIds, _request.StringifyIds == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'StringifyIds' when calling FriendshipsOutgoingGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/friendships/outgoing", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}
	if _request.StringifyIds != nil {
		_client.AddQueryParam("stringify_ids", utils.ParameterToString(_request.StringifyIds))
	}

	return _client.Fetch(result)
}

/*

   returns detailed info about relationship between two users
*/
type DefaultApiFriendshipsShowGetRequest struct {
	/*
	   user id of target user
	*/
	TargetId *string

	/*
	   screen name of target user
	*/
	TargetScreenName *string

	/*
	   user id of subject user
	*/
	SourceId *string

	/*
	   screen_name of subject user
	*/
	SourceScreenName *string
}

/*

   returns detailed info about relationship between two users

     result: Friendship
*/
func (it *DefaultApi) FriendshipsShowGet(_client swagger.FetchClient, _request *DefaultApiFriendshipsShowGetRequest, result *Friendship) error {
	if !_client.NewValidator(_request.TargetId, _request.TargetId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TargetId' when calling FriendshipsShowGet")
	}
	if !_client.NewValidator(_request.TargetScreenName, _request.TargetScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TargetScreenName' when calling FriendshipsShowGet")
	}
	if !_client.NewValidator(_request.SourceId, _request.SourceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SourceId' when calling FriendshipsShowGet")
	}
	if !_client.NewValidator(_request.SourceScreenName, _request.SourceScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SourceScreenName' when calling FriendshipsShowGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/friendships/show", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.SourceId != nil {
		_client.AddQueryParam("source_id", utils.ParameterToString(_request.SourceId))
	}
	if _request.SourceScreenName != nil {
		_client.AddQueryParam("source_screen_name", utils.ParameterToString(_request.SourceScreenName))
	}
	if _request.TargetId != nil {
		_client.AddQueryParam("target_id", utils.ParameterToString(_request.TargetId))
	}
	if _request.TargetScreenName != nil {
		_client.AddQueryParam("target_screen_name", utils.ParameterToString(_request.TargetScreenName))
	}

	return _client.Fetch(result)
}

/*

   Allows one to enable or disable settings for specified user
*/
type DefaultApiFriendshipsUpdatePostRequest struct {
	/*
	   screen name of user for whom to befriend
	*/
	ScreenName *string

	/*
	   ID of user for whom to befriend
	*/
	UserId *string

	/*
	   enable/disable device notifications for user
	*/
	Device *string

	/*
	   enable/disable retweets from target user
	*/
	Retweets *string
}

/*

   Allows one to enable or disable settings for specified user

     result: Friendship
*/
func (it *DefaultApi) FriendshipsUpdatePost(_client swagger.FetchClient, _request *DefaultApiFriendshipsUpdatePostRequest, result *Friendship) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling FriendshipsUpdatePost")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling FriendshipsUpdatePost")
	}
	if !_client.NewValidator(_request.Device, _request.Device == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Device' when calling FriendshipsUpdatePost")
	}
	if !_client.NewValidator(_request.Retweets, _request.Retweets == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Retweets' when calling FriendshipsUpdatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/friendships/update", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.Device != nil {
		_client.AddQueryParam("device", utils.ParameterToString(_request.Device))
	}
	if _request.Retweets != nil {
		_client.AddQueryParam("retweets", utils.ParameterToString(_request.Retweets))
	}

	return _client.Fetch(result)
}

/*

   Returns all the information about a know place
*/
type DefaultApiGeoIdPlaceIdGetRequest struct {
	/*
	   A place in the world
	*/
	PlaceId *string
}

/*

   Returns all the information about a know place

     result: PlacesArray
*/
func (it *DefaultApi) GeoIdPlaceIdGet(_client swagger.FetchClient, _request *DefaultApiGeoIdPlaceIdGetRequest, result *PlacesArray) error {
	if !_client.NewValidator(_request.PlaceId, _request.PlaceId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'PlaceId' when calling GeoIdPlaceIdGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/geo/id/{place_id}", "{format}", "json", -1)
		localVarPath = strings.Replace(localVarPath, "{"+"place_id"+"}", utils.EscapeString(*_request.PlaceId), -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*

   Create a new place object at the given latitude and logitude
*/
type DefaultApiGeoPlacesGetRequest struct {
	/*
	   The latitude to search around
	*/
	Lat *string

	/*
	   The longtitude to search around
	*/
	Long *string

	/*
	   The name a place is known as
	*/
	Name *string

	/*
	   The token found in the response from geo/similar_places
	*/
	Token *string

	/*
	   This is the place_id which you would like to restrict the search results to
	*/
	ContainedWithin *string

	/*
	   This parameter searches for places which have this givven street address
	*/
	AttributestreetAddress *string

	/*
	   If supplied, the responses will use the JSON format with a callback of the given name
	*/
	Callback *string
}

/*

   Create a new place object at the given latitude and logitude

     result: Places
*/
func (it *DefaultApi) GeoPlacesGet(_client swagger.FetchClient, _request *DefaultApiGeoPlacesGetRequest, result *Places) error {
	if !_client.NewValidator(_request.Lat, _request.Lat == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lat' when calling GeoPlacesGet")
	}
	if !_client.NewValidator(_request.Long, _request.Long == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Long' when calling GeoPlacesGet")
	}
	if !_client.NewValidator(_request.Name, _request.Name == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Name' when calling GeoPlacesGet")
	}
	if !_client.NewValidator(_request.Token, _request.Token == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Token' when calling GeoPlacesGet")
	}
	if !_client.NewValidator(_request.ContainedWithin, _request.ContainedWithin == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ContainedWithin' when calling GeoPlacesGet")
	}
	if !_client.NewValidator(_request.AttributestreetAddress, _request.AttributestreetAddress == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'AttributestreetAddress' when calling GeoPlacesGet")
	}
	if !_client.NewValidator(_request.Callback, _request.Callback == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Callback' when calling GeoPlacesGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/geo/places", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Lat != nil {
		_client.AddQueryParam("lat", utils.ParameterToString(_request.Lat))
	}
	if _request.Long != nil {
		_client.AddQueryParam("long", utils.ParameterToString(_request.Long))
	}
	if _request.Name != nil {
		_client.AddQueryParam("name", utils.ParameterToString(_request.Name))
	}
	if _request.Token != nil {
		_client.AddQueryParam("token", utils.ParameterToString(_request.Token))
	}
	if _request.ContainedWithin != nil {
		_client.AddQueryParam("contained_within", utils.ParameterToString(_request.ContainedWithin))
	}
	if _request.AttributestreetAddress != nil {
		_client.AddQueryParam("attribute:street_address", utils.ParameterToString(_request.AttributestreetAddress))
	}
	if _request.Callback != nil {
		_client.AddQueryParam("callback", utils.ParameterToString(_request.Callback))
	}

	return _client.Fetch(result)
}

/*

   Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updatting a status
*/
type DefaultApiGeoReverseGeoncodeGetRequest struct {
	/*
	   The latitude to search around
	*/
	Lat *string

	/*
	   The longtitude to search around
	*/
	Long *string

	/*
	   A hint on region in which to search
	*/
	Accuracy *string

	/*
	   This is the minimal granularity of place types to return
	*/
	Granularity *string

	/*
	   A hint as to the number of results to return
	*/
	MaxResults *string

	/*
	   If supplied, the responses will use the JSON format with a callback of the given name
	*/
	Callback *string
}

/*

   Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updatting a status

     result: PlacesArray
*/
func (it *DefaultApi) GeoReverseGeoncodeGet(_client swagger.FetchClient, _request *DefaultApiGeoReverseGeoncodeGetRequest, result *PlacesArray) error {
	if !_client.NewValidator(_request.Lat, _request.Lat == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lat' when calling GeoReverseGeoncodeGet")
	}
	if !_client.NewValidator(_request.Long, _request.Long == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Long' when calling GeoReverseGeoncodeGet")
	}
	if !_client.NewValidator(_request.Accuracy, _request.Accuracy == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Accuracy' when calling GeoReverseGeoncodeGet")
	}
	if !_client.NewValidator(_request.Granularity, _request.Granularity == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Granularity' when calling GeoReverseGeoncodeGet")
	}
	if !_client.NewValidator(_request.MaxResults, _request.MaxResults == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'MaxResults' when calling GeoReverseGeoncodeGet")
	}
	if !_client.NewValidator(_request.Callback, _request.Callback == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Callback' when calling GeoReverseGeoncodeGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/geo/reverse_geoncode", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Lat != nil {
		_client.AddQueryParam("lat", utils.ParameterToString(_request.Lat))
	}
	if _request.Long != nil {
		_client.AddQueryParam("long", utils.ParameterToString(_request.Long))
	}
	if _request.Accuracy != nil {
		_client.AddQueryParam("accuracy", utils.ParameterToString(_request.Accuracy))
	}
	if _request.Granularity != nil {
		_client.AddQueryParam("granularity", utils.ParameterToString(_request.Granularity))
	}
	if _request.MaxResults != nil {
		_client.AddQueryParam("max_results", utils.ParameterToString(_request.MaxResults))
	}
	if _request.Callback != nil {
		_client.AddQueryParam("callback", utils.ParameterToString(_request.Callback))
	}

	return _client.Fetch(result)
}

/*

   Search for places that can be attached to a statuses/updates
*/
type DefaultApiGeoSearchGetRequest struct {
	/*
	   The latitude to search around
	*/
	Lat *string

	/*
	   The longtitude to search around
	*/
	Long *string

	/*
	   Free-form text to match against while executing a geo-based query
	*/
	Query *string

	/*
	   An Ip address
	*/
	Ip *string

	/*
	   A hint on region in which to search
	*/
	Accuracy *string

	/*
	   This is the minimal granularity of place types to return
	*/
	Granularity *string

	/*
	   This is the place_id which you would like to restrict the search results to
	*/
	ContainedWithin *string

	/*
	   This parameter searches for places which have this givven street address
	*/
	AttributestreetAddress *string

	/*
	   If supplied, the responses will use the JSON format with a callback of the given name
	*/
	Callback *string
}

/*

   Search for places that can be attached to a statuses/updates

     result: PlacesArray
*/
func (it *DefaultApi) GeoSearchGet(_client swagger.FetchClient, _request *DefaultApiGeoSearchGetRequest, result *PlacesArray) error {
	if !_client.NewValidator(_request.Lat, _request.Lat == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lat' when calling GeoSearchGet")
	}
	if !_client.NewValidator(_request.Long, _request.Long == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Long' when calling GeoSearchGet")
	}
	if !_client.NewValidator(_request.Query, _request.Query == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Query' when calling GeoSearchGet")
	}
	if !_client.NewValidator(_request.Ip, _request.Ip == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Ip' when calling GeoSearchGet")
	}
	if !_client.NewValidator(_request.Accuracy, _request.Accuracy == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Accuracy' when calling GeoSearchGet")
	}
	if !_client.NewValidator(_request.Granularity, _request.Granularity == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Granularity' when calling GeoSearchGet")
	}
	if !_client.NewValidator(_request.ContainedWithin, _request.ContainedWithin == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ContainedWithin' when calling GeoSearchGet")
	}
	if !_client.NewValidator(_request.AttributestreetAddress, _request.AttributestreetAddress == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'AttributestreetAddress' when calling GeoSearchGet")
	}
	if !_client.NewValidator(_request.Callback, _request.Callback == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Callback' when calling GeoSearchGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/geo/search", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Lat != nil {
		_client.AddQueryParam("lat", utils.ParameterToString(_request.Lat))
	}
	if _request.Long != nil {
		_client.AddQueryParam("long", utils.ParameterToString(_request.Long))
	}
	if _request.Query != nil {
		_client.AddQueryParam("query", utils.ParameterToString(_request.Query))
	}
	if _request.Ip != nil {
		_client.AddQueryParam("ip", utils.ParameterToString(_request.Ip))
	}
	if _request.Accuracy != nil {
		_client.AddQueryParam("accuracy", utils.ParameterToString(_request.Accuracy))
	}
	if _request.Granularity != nil {
		_client.AddQueryParam("granularity", utils.ParameterToString(_request.Granularity))
	}
	if _request.ContainedWithin != nil {
		_client.AddQueryParam("contained_within", utils.ParameterToString(_request.ContainedWithin))
	}
	if _request.AttributestreetAddress != nil {
		_client.AddQueryParam("attribute:street_address", utils.ParameterToString(_request.AttributestreetAddress))
	}
	if _request.Callback != nil {
		_client.AddQueryParam("callback", utils.ParameterToString(_request.Callback))
	}

	return _client.Fetch(result)
}

/*

   Locates places near the given coordinates which are similar in name
*/
type DefaultApiGeoSimilarPlacesGetRequest struct {
	/*
	   The latitude to search around
	*/
	Lat *string

	/*
	   The longtitude to search around
	*/
	Long *string

	/*
	   The name a place is known as
	*/
	Name *string

	/*
	   This is the place_id which you would like to restrict the search results to
	*/
	ContainedWithin *string

	/*
	   This parameter searches for places which have this givven street address
	*/
	AttributestreetAddress *string

	/*
	   If supplied, the responses will use the JSON format with a callback of the given name
	*/
	Callback *string
}

/*

   Locates places near the given coordinates which are similar in name

     result: PlacesArray
*/
func (it *DefaultApi) GeoSimilarPlacesGet(_client swagger.FetchClient, _request *DefaultApiGeoSimilarPlacesGetRequest, result *PlacesArray) error {
	if !_client.NewValidator(_request.Lat, _request.Lat == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lat' when calling GeoSimilarPlacesGet")
	}
	if !_client.NewValidator(_request.Long, _request.Long == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Long' when calling GeoSimilarPlacesGet")
	}
	if !_client.NewValidator(_request.Name, _request.Name == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Name' when calling GeoSimilarPlacesGet")
	}
	if !_client.NewValidator(_request.ContainedWithin, _request.ContainedWithin == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ContainedWithin' when calling GeoSimilarPlacesGet")
	}
	if !_client.NewValidator(_request.AttributestreetAddress, _request.AttributestreetAddress == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'AttributestreetAddress' when calling GeoSimilarPlacesGet")
	}
	if !_client.NewValidator(_request.Callback, _request.Callback == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Callback' when calling GeoSimilarPlacesGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/geo/similar_places", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Lat != nil {
		_client.AddQueryParam("lat", utils.ParameterToString(_request.Lat))
	}
	if _request.Long != nil {
		_client.AddQueryParam("long", utils.ParameterToString(_request.Long))
	}
	if _request.Name != nil {
		_client.AddQueryParam("name", utils.ParameterToString(_request.Name))
	}
	if _request.ContainedWithin != nil {
		_client.AddQueryParam("contained_within", utils.ParameterToString(_request.ContainedWithin))
	}
	if _request.AttributestreetAddress != nil {
		_client.AddQueryParam("attribute:street_address", utils.ParameterToString(_request.AttributestreetAddress))
	}
	if _request.Callback != nil {
		_client.AddQueryParam("callback", utils.ParameterToString(_request.Callback))
	}

	return _client.Fetch(result)
}

/*

   Returns the current configuration used by Twitter including twitter.com slugs which are not usernames
*/
type DefaultApiHelpConfigurationGetRequest struct {
}

/*

   Returns the current configuration used by Twitter including twitter.com slugs which are not usernames

     result: HelpConfig
*/
func (it *DefaultApi) HelpConfigurationGet(_client swagger.FetchClient, _request *DefaultApiHelpConfigurationGetRequest, result *HelpConfig) error {

	// create path and map variables
	{
		localVarPath := strings.Replace("/help/configuration", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*

   Returns the list of languages supported by Twitter along with the language code supported by Twitter
*/
type DefaultApiHelpLanguagesGetRequest struct {
}

/*

   Returns the list of languages supported by Twitter along with the language code supported by Twitter

     result: HelpLanguageArray
*/
func (it *DefaultApi) HelpLanguagesGet(_client swagger.FetchClient, _request *DefaultApiHelpLanguagesGetRequest, result *HelpLanguageArray) error {

	// create path and map variables
	{
		localVarPath := strings.Replace("/help/languages", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*

   Returns Twitter&#39;s privacy policy
*/
type DefaultApiHelpPrivacyGetRequest struct {
}

/*

   Returns Twitter&#39;s privacy policy

     result: HelpPrivacy
*/
func (it *DefaultApi) HelpPrivacyGet(_client swagger.FetchClient, _request *DefaultApiHelpPrivacyGetRequest, result *HelpPrivacy) error {

	// create path and map variables
	{
		localVarPath := strings.Replace("/help/privacy", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*

   Returns the Twitter Terms of Service
*/
type DefaultApiHelpTosGetRequest struct {
}

/*

   Returns the Twitter Terms of Service

     result: HelpTos
*/
func (it *DefaultApi) HelpTosGet(_client swagger.FetchClient, _request *DefaultApiHelpTosGetRequest, result *HelpTos) error {

	// create path and map variables
	{
		localVarPath := strings.Replace("/help/tos", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*

   Returns list of members create
*/
type DefaultApiListMembersCreatePostRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   The screen name of the user for whom to remove from the list
	*/
	ScreenName *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string
}

/*

   Returns list of members create

     result: void
*/
func (it *DefaultApi) ListMembersCreatePost(_client swagger.FetchClient, _request *DefaultApiListMembersCreatePostRequest, result interface{}) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListMembersCreatePost")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListMembersCreatePost")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListMembersCreatePost")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListMembersCreatePost")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListMembersCreatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/list/members/create", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}

	return _client.Fetch(result)
}

/*

   Returns lists of destroy all
*/
type DefaultApiListMembersDestroyAllGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   The id of the user for whom to remove from the list
	*/
	UserId *string

	/*
	   The screen name of the user for whom to remove from the list
	*/
	ScreenName *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string
}

/*

   Returns lists of destroy all

     result: CursorLists
*/
func (it *DefaultApi) ListMembersDestroyAllGet(_client swagger.FetchClient, _request *DefaultApiListMembersDestroyAllGetRequest, result *CursorLists) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListMembersDestroyAllGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListMembersDestroyAllGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling ListMembersDestroyAllGet")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListMembersDestroyAllGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListMembersDestroyAllGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListMembersDestroyAllGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/list/members/destroy_all", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}

	return _client.Fetch(result)
}

/*

   Returns the members of the specified list
*/
type DefaultApiListMembersGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string

	/*
	   Wehn set to either true, t or 1
	*/
	IncludeEntities *string

	/*
	   When set to either true, t or 1
	*/
	SkipStatus *string

	/*
	   Breaks the results into pages
	*/
	Cursor *string
}

/*

   Returns the members of the specified list

     result: Users
*/
func (it *DefaultApi) ListMembersGet(_client swagger.FetchClient, _request *DefaultApiListMembersGetRequest, result *Users) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListMembersGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListMembersGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListMembersGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListMembersGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling ListMembersGet")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling ListMembersGet")
	}
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling ListMembersGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/list/members", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}
	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}

	return _client.Fetch(result)
}

/*

   Check if the specified user is a member of the specified list
*/
type DefaultApiListMembersShowGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   The id of the user for whom to remove from the list
	*/
	UserId *string

	/*
	   The screen name of the user for whom to remove from the list
	*/
	ScreenName *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string

	/*
	   Wehn set to either true, t or 1
	*/
	IncludeEntities *string

	/*
	   When set to either true, t or 1
	*/
	SkipStatus *string
}

/*

   Check if the specified user is a member of the specified list

     result: Users
*/
func (it *DefaultApi) ListMembersShowGet(_client swagger.FetchClient, _request *DefaultApiListMembersShowGetRequest, result *Users) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListMembersShowGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListMembersShowGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling ListMembersShowGet")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListMembersShowGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListMembersShowGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListMembersShowGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling ListMembersShowGet")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling ListMembersShowGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/list/members/show", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*

   Returns list of create
*/
type DefaultApiListsCreatePostRequest struct {
	/*
	   The name for the list
	*/
	Name *string

	/*
	   Whether your list is public or private
	*/
	Mode *string

	/*
	   The description to give the list
	*/
	Description *string
}

/*

   Returns list of create

     result: Lists
*/
func (it *DefaultApi) ListsCreatePost(_client swagger.FetchClient, _request *DefaultApiListsCreatePostRequest, result *Lists) error {
	if !_client.NewValidator(_request.Name, _request.Name == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Name' when calling ListsCreatePost")
	}
	if !_client.NewValidator(_request.Mode, _request.Mode == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Mode' when calling ListsCreatePost")
	}
	if !_client.NewValidator(_request.Description, _request.Description == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Description' when calling ListsCreatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/create", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Name != nil {
		_client.AddQueryParam("name", utils.ParameterToString(_request.Name))
	}
	if _request.Mode != nil {
		_client.AddQueryParam("mode", utils.ParameterToString(_request.Mode))
	}
	if _request.Description != nil {
		_client.AddQueryParam("description", utils.ParameterToString(_request.Description))
	}

	return _client.Fetch(result)
}

/*

   Returns list of destroy
*/
type DefaultApiListsDestroyPostRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string
}

/*

   Returns list of destroy

     result: Lists
*/
func (it *DefaultApi) ListsDestroyPost(_client swagger.FetchClient, _request *DefaultApiListsDestroyPostRequest, result *Lists) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsDestroyPost")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsDestroyPost")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsDestroyPost")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsDestroyPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/destroy", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}

	return _client.Fetch(result)
}

/*

   Return all lists the authenticating or specified user subscribes to, including their own.
*/
type DefaultApiListsListGetRequest struct {
	/*
	   The screen name of the user for whom to return results for
	*/
	ScreenName *string

	/*
	   The ID of the user for whom to return results for
	*/
	UserId *string
}

/*

   Return all lists the authenticating or specified user subscribes to, including their own.

     result: ListsArray
*/
func (it *DefaultApi) ListsListGet(_client swagger.FetchClient, _request *DefaultApiListsListGetRequest, result *ListsArray) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListsListGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling ListsListGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/list", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}

	return _client.Fetch(result)
}

/*

   Returns lists of members create_all
*/
type DefaultApiListsMembersCreateAllGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   the screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string

	/*
	   The id of the user for whom to remove from the list
	*/
	UserId *string

	/*
	   The screen name of the user for whom to remove from the list
	*/
	ScreenName *string
}

/*

   Returns lists of members create_all

     result: void
*/
func (it *DefaultApi) ListsMembersCreateAllGet(_client swagger.FetchClient, _request *DefaultApiListsMembersCreateAllGetRequest, result interface{}) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsMembersCreateAllGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsMembersCreateAllGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsMembersCreateAllGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsMembersCreateAllGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling ListsMembersCreateAllGet")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListsMembersCreateAllGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/members/create_all", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}

	return _client.Fetch(result)
}

/*

   Returns the list of memebers destroy
*/
type DefaultApiListsMembersDestroyGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list by its slug instrad of its numerical id
	*/
	Slug *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The id of the user for whom to remove from the list
	*/
	UserId *string

	/*
	   The screen name of the user for whom to remove from the list
	*/
	ScreenName *string

	/*
	   The is of the user who wons the list being requested by a slug
	*/
	OwnerId *string
}

/*

   Returns the list of memebers destroy

     result: void
*/
func (it *DefaultApi) ListsMembersDestroyGet(_client swagger.FetchClient, _request *DefaultApiListsMembersDestroyGetRequest, result interface{}) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsMembersDestroyGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsMembersDestroyGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsMembersDestroyGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling ListsMembersDestroyGet")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListsMembersDestroyGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsMembersDestroyGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/members/destroy", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}

	return _client.Fetch(result)
}

/*

   Returns the lists of the specified user has been added to
*/
type DefaultApiListsMembershipsGetRequest struct {
	/*
	   The id of the user for whom to return results for
	*/
	UserId *string

	/*
	   The screen name of the user for whom to return results for
	*/
	ScreenName *string

	/*
	   Breaks the results into pages
	*/
	Cursor *string

	/*
	   When set to true, t or 1, will return just lists the authenticating user owns
	*/
	FilterToOwnedLists *string
}

/*

   Returns the lists of the specified user has been added to

     result: CursorLists
*/
func (it *DefaultApi) ListsMembershipsGet(_client swagger.FetchClient, _request *DefaultApiListsMembershipsGetRequest, result *CursorLists) error {
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling ListsMembershipsGet")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListsMembershipsGet")
	}
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling ListsMembershipsGet")
	}
	if !_client.NewValidator(_request.FilterToOwnedLists, _request.FilterToOwnedLists == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'FilterToOwnedLists' when calling ListsMembershipsGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/memberships", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}
	if _request.FilterToOwnedLists != nil {
		_client.AddQueryParam("filter_to_owned_lists", utils.ParameterToString(_request.FilterToOwnedLists))
	}

	return _client.Fetch(result)
}

/*

   Returns list of show
*/
type DefaultApiListsShowGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string
}

/*

   Returns list of show

     result: Lists
*/
func (it *DefaultApi) ListsShowGet(_client swagger.FetchClient, _request *DefaultApiListsShowGetRequest, result *Lists) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsShowGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsShowGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsShowGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsShowGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/show", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}

	return _client.Fetch(result)
}

/*

   Returns a timeline of tweets authored by memebers of the specified list
*/
type DefaultApiListsStatusesGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list by its slug instead of its numerical id
	*/
	Slug *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string

	/*
	   Returns results with an ID greater than the sepcified ID
	*/
	SinceId *string

	/*
	   Returns results with an ID less than or equal to the specified ID
	*/
	MaxId *string

	/*
	   Specifies the number of results to retrieve per page
	*/
	Count *string

	/*
	   Entities are ON by default
	*/
	IncludeEntities *string

	/*
	   When set to either true, t or 1, the list timeline will contain native retweets in addition to the standard stream of tweets
	*/
	IncludeRts *string
}

/*

   Returns a timeline of tweets authored by memebers of the specified list

     result: TweetsArray
*/
func (it *DefaultApi) ListsStatusesGet(_client swagger.FetchClient, _request *DefaultApiListsStatusesGetRequest, result *TweetsArray) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsStatusesGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsStatusesGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsStatusesGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsStatusesGet")
	}
	if !_client.NewValidator(_request.SinceId, _request.SinceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SinceId' when calling ListsStatusesGet")
	}
	if !_client.NewValidator(_request.MaxId, _request.MaxId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'MaxId' when calling ListsStatusesGet")
	}
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling ListsStatusesGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling ListsStatusesGet")
	}
	if !_client.NewValidator(_request.IncludeRts, _request.IncludeRts == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeRts' when calling ListsStatusesGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/statuses", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}
	if _request.SinceId != nil {
		_client.AddQueryParam("since_id", utils.ParameterToString(_request.SinceId))
	}
	if _request.MaxId != nil {
		_client.AddQueryParam("max_id", utils.ParameterToString(_request.MaxId))
	}
	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.IncludeRts != nil {
		_client.AddQueryParam("include_rts", utils.ParameterToString(_request.IncludeRts))
	}

	return _client.Fetch(result)
}

/*

   Subscribes the authenticated user to the specified list
*/
type DefaultApiListsSubscribersCreatePostRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   the screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string
}

/*

   Subscribes the authenticated user to the specified list

     result: Lists
*/
func (it *DefaultApi) ListsSubscribersCreatePost(_client swagger.FetchClient, _request *DefaultApiListsSubscribersCreatePostRequest, result *Lists) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsSubscribersCreatePost")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsSubscribersCreatePost")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsSubscribersCreatePost")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsSubscribersCreatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/subscribers/create", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}

	return _client.Fetch(result)
}

/*

   Returns list of subscribers destroy
*/
type DefaultApiListsSubscribersDestroyGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   the screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string
}

/*

   Returns list of subscribers destroy

     result: void
*/
func (it *DefaultApi) ListsSubscribersDestroyGet(_client swagger.FetchClient, _request *DefaultApiListsSubscribersDestroyGetRequest, result interface{}) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsSubscribersDestroyGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsSubscribersDestroyGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsSubscribersDestroyGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsSubscribersDestroyGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/subscribers/destroy", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}

	return _client.Fetch(result)
}

/*

   Returns the subscribers of the specified list
*/
type DefaultApiListsSubscribersGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list by its slug insted of its numerical id
	*/
	Slug *string

	/*
	   the screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string

	/*
	   Breaks the results into pages
	*/
	Cursor *string

	/*
	   Wehn set to either true, t or 1
	*/
	IncludeEntities *string

	/*
	   When set to either true, t or 1
	*/
	SkipStatus *string
}

/*

   Returns the subscribers of the specified list

     result: CursorLists
*/
func (it *DefaultApi) ListsSubscribersGet(_client swagger.FetchClient, _request *DefaultApiListsSubscribersGetRequest, result *CursorLists) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsSubscribersGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsSubscribersGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsSubscribersGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsSubscribersGet")
	}
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling ListsSubscribersGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling ListsSubscribersGet")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling ListsSubscribersGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/subscribers", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}
	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*

   Check if the specified user is a subscriber of the specified list
*/
type DefaultApiListsSubscribersShowGetRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The id of the user for whom to remove from the list
	*/
	UserId *string

	/*
	   The screen name of the user for whom to remove from the list
	*/
	ScreenName *string

	/*
	   The is of the user who wons the list being requested by a slug
	*/
	OwnerId *string

	/*
	   Wehn set to either true, t or 1
	*/
	IncludeEntities *string

	/*
	   When set to either true, t or 1
	*/
	SkipStatus *string
}

/*

   Check if the specified user is a subscriber of the specified list

     result: Users
*/
func (it *DefaultApi) ListsSubscribersShowGet(_client swagger.FetchClient, _request *DefaultApiListsSubscribersShowGetRequest, result *Users) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsSubscribersShowGet")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsSubscribersShowGet")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsSubscribersShowGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling ListsSubscribersShowGet")
	}
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListsSubscribersShowGet")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsSubscribersShowGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling ListsSubscribersShowGet")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling ListsSubscribersShowGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/subscribers/show", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*

   Returns list of subscriptions
*/
type DefaultApiListsSubscriptionsGetRequest struct {
	/*
	   The screen name of the user
	*/
	ScreenName *string

	/*
	   The id of the user for whom to return results for
	*/
	UserId *string

	/*
	   The amount of results to return per page
	*/
	Count *string

	/*
	   Breaks the results into pages
	*/
	Cursor *string
}

/*

   Returns list of subscriptions

     result: CursorLists
*/
func (it *DefaultApi) ListsSubscriptionsGet(_client swagger.FetchClient, _request *DefaultApiListsSubscriptionsGetRequest, result *CursorLists) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling ListsSubscriptionsGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling ListsSubscriptionsGet")
	}
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling ListsSubscriptionsGet")
	}
	if !_client.NewValidator(_request.Cursor, _request.Cursor == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Cursor' when calling ListsSubscriptionsGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/subscriptions", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}
	if _request.Cursor != nil {
		_client.AddQueryParam("cursor", utils.ParameterToString(_request.Cursor))
	}

	return _client.Fetch(result)
}

/*

   Returns lists of updates
*/
type DefaultApiListsUpdatePostRequest struct {
	/*
	   The numerical id of the list
	*/
	ListId *string

	/*
	   You can identify a list being requested by a slug
	*/
	Slug *string

	/*
	   The screen name of the user who owns the list being requested by a slug
	*/
	OwnerScreenName *string

	/*
	   The user ID of the user who owns the list being requested by a slug
	*/
	OwnerId *string

	/*
	   The name for the list
	*/
	Name *string

	/*
	   Whether your list is public or private
	*/
	Mode *string

	/*
	   The description to give the list
	*/
	Description *string
}

/*

   Returns lists of updates

     result: void
*/
func (it *DefaultApi) ListsUpdatePost(_client swagger.FetchClient, _request *DefaultApiListsUpdatePostRequest, result interface{}) error {
	if !_client.NewValidator(_request.ListId, _request.ListId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ListId' when calling ListsUpdatePost")
	}
	if !_client.NewValidator(_request.Slug, _request.Slug == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Slug' when calling ListsUpdatePost")
	}
	if !_client.NewValidator(_request.OwnerScreenName, _request.OwnerScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerScreenName' when calling ListsUpdatePost")
	}
	if !_client.NewValidator(_request.OwnerId, _request.OwnerId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'OwnerId' when calling ListsUpdatePost")
	}
	if !_client.NewValidator(_request.Name, _request.Name == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Name' when calling ListsUpdatePost")
	}
	if !_client.NewValidator(_request.Mode, _request.Mode == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Mode' when calling ListsUpdatePost")
	}
	if !_client.NewValidator(_request.Description, _request.Description == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Description' when calling ListsUpdatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/lists/update", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ListId != nil {
		_client.AddQueryParam("list_id", utils.ParameterToString(_request.ListId))
	}
	if _request.Slug != nil {
		_client.AddQueryParam("slug", utils.ParameterToString(_request.Slug))
	}
	if _request.OwnerScreenName != nil {
		_client.AddQueryParam("owner_screen_name", utils.ParameterToString(_request.OwnerScreenName))
	}
	if _request.OwnerId != nil {
		_client.AddQueryParam("owner_id", utils.ParameterToString(_request.OwnerId))
	}
	if _request.Name != nil {
		_client.AddQueryParam("name", utils.ParameterToString(_request.Name))
	}
	if _request.Mode != nil {
		_client.AddQueryParam("mode", utils.ParameterToString(_request.Mode))
	}
	if _request.Description != nil {
		_client.AddQueryParam("description", utils.ParameterToString(_request.Description))
	}

	return _client.Fetch(result)
}

/*

   Create a new saved search for the authenticated user
*/
type DefaultApiSavedSearchesCreatePostRequest struct {
	/*
	   The query of the search the user would like to save
	*/
	Query *string
}

/*

   Create a new saved search for the authenticated user

     result: Query
*/
func (it *DefaultApi) SavedSearchesCreatePost(_client swagger.FetchClient, _request *DefaultApiSavedSearchesCreatePostRequest, result *Query) error {
	if !_client.NewValidator(_request.Query, _request.Query == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Query' when calling SavedSearchesCreatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/saved_searches/create", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Query != nil {
		_client.AddQueryParam("query", utils.ParameterToString(_request.Query))
	}

	return _client.Fetch(result)
}

/*

   Destroy a saved search for the authenticating user
*/
type DefaultApiSavedSearchesDestroyIdPostRequest struct {
	/*
	   The id of the saved search
	*/
	Id *string
}

/*

   Destroy a saved search for the authenticating user

     result: Query
*/
func (it *DefaultApi) SavedSearchesDestroyIdPost(_client swagger.FetchClient, _request *DefaultApiSavedSearchesDestroyIdPostRequest, result *Query) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling SavedSearchesDestroyIdPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/saved_searches/destroy/{id}", "{format}", "json", -1)
		localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", utils.EscapeString(*_request.Id), -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	return _client.Fetch(result)
}

/*

   Returns the authenticated user&#39;s saved search queries
*/
type DefaultApiSavedSearchesListGetRequest struct {
}

/*

   Returns the authenticated user&#39;s saved search queries

     result: QueryArray
*/
func (it *DefaultApi) SavedSearchesListGet(_client swagger.FetchClient, _request *DefaultApiSavedSearchesListGetRequest, result *QueryArray) error {

	// create path and map variables
	{
		localVarPath := strings.Replace("/saved_searches/list", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*

   Retrieve the information for the saved search represented by the given id
*/
type DefaultApiSavedSearchesShowIdGetRequest struct {
	/*
	   The id of the saved search
	*/
	Id *string
}

/*

   Retrieve the information for the saved search represented by the given id

     result: Query
*/
func (it *DefaultApi) SavedSearchesShowIdGet(_client swagger.FetchClient, _request *DefaultApiSavedSearchesShowIdGetRequest, result *Query) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling SavedSearchesShowIdGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/saved_searches/show/{id}", "{format}", "json", -1)
		localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", utils.EscapeString(*_request.Id), -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*

   returns collection of relevant Tweets matching query
*/
type DefaultApiSearchTweetsGetRequest struct {
	/*
	   URL-encoded search query of 500 characters max
	*/
	Q *string

	/*
	   returns tweets by users located within given radius
	*/
	Geocode *string

	/*
	   restricts tweets to a given language
	*/
	Lang *string

	/*
	   language of query you are sending
	*/
	Locale *string

	/*
	   specifies type of search results you prefer
	*/
	ResultType *string

	/*
	   number of tweets to return
	*/
	Count *string

	/*
	   returns tweets created before given date
	*/
	Until *string

	/*
	   return results with ID greater than specified
	*/
	SinceId *string

	/*
	   returns results with an ID less than/equal to specified ID
	*/
	MaxId *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   response will use the callback with given name
	*/
	Callback *string
}

/*

   returns collection of relevant Tweets matching query

     result: TweetsArray
*/
func (it *DefaultApi) SearchTweetsGet(_client swagger.FetchClient, _request *DefaultApiSearchTweetsGetRequest, result *TweetsArray) error {
	if !_client.NewValidator(_request.Q, _request.Q == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Q' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.Geocode, _request.Geocode == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Geocode' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.Lang, _request.Lang == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lang' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.Locale, _request.Locale == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Locale' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.ResultType, _request.ResultType == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ResultType' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.Until, _request.Until == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Until' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.SinceId, _request.SinceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SinceId' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.MaxId, _request.MaxId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'MaxId' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling SearchTweetsGet")
	}
	if !_client.NewValidator(_request.Callback, _request.Callback == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Callback' when calling SearchTweetsGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/search/tweets", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Q != nil {
		_client.AddQueryParam("q", utils.ParameterToString(_request.Q))
	}
	if _request.Geocode != nil {
		_client.AddQueryParam("geocode", utils.ParameterToString(_request.Geocode))
	}
	if _request.Lang != nil {
		_client.AddQueryParam("lang", utils.ParameterToString(_request.Lang))
	}
	if _request.Locale != nil {
		_client.AddQueryParam("locale", utils.ParameterToString(_request.Locale))
	}
	if _request.ResultType != nil {
		_client.AddQueryParam("result_type", utils.ParameterToString(_request.ResultType))
	}
	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}
	if _request.Until != nil {
		_client.AddQueryParam("until", utils.ParameterToString(_request.Until))
	}
	if _request.SinceId != nil {
		_client.AddQueryParam("since_id", utils.ParameterToString(_request.SinceId))
	}
	if _request.MaxId != nil {
		_client.AddQueryParam("max_id", utils.ParameterToString(_request.MaxId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.Callback != nil {
		_client.AddQueryParam("callback", utils.ParameterToString(_request.Callback))
	}

	return _client.Fetch(result)
}

/*

   Destroys the status specified by the required ID parameter
*/
type DefaultApiStatusesDestroyIdPostRequest struct {
	/*
	   The numerical ID of the desired status
	*/
	Id *string

	/*
	   When set to either true, t or 1, each tweet returned in a timeline will include a user object
	*/
	TrimUser *string
}

/*

   Destroys the status specified by the required ID parameter

     result: Tweets
*/
func (it *DefaultApi) StatusesDestroyIdPost(_client swagger.FetchClient, _request *DefaultApiStatusesDestroyIdPostRequest, result *Tweets) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling StatusesDestroyIdPost")
	}
	if !_client.NewValidator(_request.TrimUser, _request.TrimUser == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrimUser' when calling StatusesDestroyIdPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/destroy/{id}", "{format}", "json", -1)
		localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", utils.EscapeString(*_request.Id), -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.TrimUser != nil {
		_client.AddQueryParam("trim_user", utils.ParameterToString(_request.TrimUser))
	}

	return _client.Fetch(result)
}

/*

   Returns a collection of the most recent Tweets
*/
type DefaultApiStatusesHomeTimelineGetRequest struct {
	/*
	   Returns result with an ID greater than the specified ID
	*/
	SinceId *string

	/*
	   Returns results with an ID less than or equal to the specified ID
	*/
	MaxId *string

	/*
	   When set to either true, t or 1, each tweet returned in a timeline will include a user object
	*/
	TrimUser *string

	/*
	   This paramters will prevent from appearing in the returned timeline
	*/
	ExcludeReplies *bool

	/*
	   This paramters enhances the contributors element of the status response to include the screen_name of the contributor
	*/
	ContributorDetails *bool
}

/*

   Returns a collection of the most recent Tweets

     result: TweetsArray
*/
func (it *DefaultApi) StatusesHomeTimelineGet(_client swagger.FetchClient, _request *DefaultApiStatusesHomeTimelineGetRequest, result *TweetsArray) error {
	if !_client.NewValidator(_request.SinceId, _request.SinceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SinceId' when calling StatusesHomeTimelineGet")
	}
	if !_client.NewValidator(_request.MaxId, _request.MaxId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'MaxId' when calling StatusesHomeTimelineGet")
	}
	if !_client.NewValidator(_request.TrimUser, _request.TrimUser == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrimUser' when calling StatusesHomeTimelineGet")
	}
	if !_client.NewValidator(_request.ExcludeReplies, _request.ExcludeReplies == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ExcludeReplies' when calling StatusesHomeTimelineGet")
	}
	if !_client.NewValidator(_request.ContributorDetails, _request.ContributorDetails == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ContributorDetails' when calling StatusesHomeTimelineGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/home_timeline", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.SinceId != nil {
		_client.AddQueryParam("since_id", utils.ParameterToString(_request.SinceId))
	}
	if _request.MaxId != nil {
		_client.AddQueryParam("max_id", utils.ParameterToString(_request.MaxId))
	}
	if _request.TrimUser != nil {
		_client.AddQueryParam("trim_user", utils.ParameterToString(_request.TrimUser))
	}
	if _request.ExcludeReplies != nil {
		_client.AddQueryParam("exclude_replies", utils.ParameterToString(_request.ExcludeReplies))
	}
	if _request.ContributorDetails != nil {
		_client.AddQueryParam("contributor_details", utils.ParameterToString(_request.ContributorDetails))
	}

	return _client.Fetch(result)
}

/*

   Returns the 20 most recent mentions for the authenticating user
*/
type DefaultApiStatusesMentionsTimelineGetRequest struct {
	/*
	   Specifies the number of tweets to try and retrieve
	*/
	Count *string

	/*
	   Returns result with an ID greater than the specified ID
	*/
	SinceId *string

	/*
	   Returns results with an ID less than or equal to the specified ID
	*/
	MaxId *string

	/*
	   When set to either true, t or 1, each tweet returned in a timeline will include a user object
	*/
	TrimUser *string

	/*
	   This parameter enhances the contributors element of the status response
	*/
	ContributorDetails *string

	/*
	   The entities node will be disincluded when set to false
	*/
	IncludeEntities *string
}

/*

   Returns the 20 most recent mentions for the authenticating user

     result: TweetsArray
*/
func (it *DefaultApi) StatusesMentionsTimelineGet(_client swagger.FetchClient, _request *DefaultApiStatusesMentionsTimelineGetRequest, result *TweetsArray) error {
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling StatusesMentionsTimelineGet")
	}
	if !_client.NewValidator(_request.SinceId, _request.SinceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SinceId' when calling StatusesMentionsTimelineGet")
	}
	if !_client.NewValidator(_request.MaxId, _request.MaxId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'MaxId' when calling StatusesMentionsTimelineGet")
	}
	if !_client.NewValidator(_request.TrimUser, _request.TrimUser == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrimUser' when calling StatusesMentionsTimelineGet")
	}
	if !_client.NewValidator(_request.ContributorDetails, _request.ContributorDetails == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ContributorDetails' when calling StatusesMentionsTimelineGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling StatusesMentionsTimelineGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/mentions_timeline", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}
	if _request.SinceId != nil {
		_client.AddQueryParam("since_id", utils.ParameterToString(_request.SinceId))
	}
	if _request.MaxId != nil {
		_client.AddQueryParam("max_id", utils.ParameterToString(_request.MaxId))
	}
	if _request.TrimUser != nil {
		_client.AddQueryParam("trim_user", utils.ParameterToString(_request.TrimUser))
	}
	if _request.ContributorDetails != nil {
		_client.AddQueryParam("contributor_details", utils.ParameterToString(_request.ContributorDetails))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}

	return _client.Fetch(result)
}

/*

   Returns information allowing the creation of an embedded representation
*/
type DefaultApiStatusesOembedGetRequest struct {
	/*
	   The tweet/status id to return embed code for
	*/
	Id *string

	/*
	   The encoded URL of the Tweet status to be embedded
	*/
	Url *string

	/*
	   The maximum width in pixels that the embed should be rendered at
	*/
	Maxwidth *string

	/*
	   Specifies whether the embedded tweet should automatically show the original message in the case that the embedded Tweet is a reply
	*/
	HideMedia *string

	/*
	   Specifies whether the embedded Tweet html should include a &#39;script&#39; element pointing to widgets.js
	*/
	HideThread *string

	/*
	   Specifies whether the embedded Tweet should be left aligned
	*/
	Align *string

	/*
	   A value for the TWT related parameters
	*/
	Related *string

	/*
	   Languages code for the rendered embed
	*/
	Lang *string
}

/*

   Returns information allowing the creation of an embedded representation

     result: Tweets
*/
func (it *DefaultApi) StatusesOembedGet(_client swagger.FetchClient, _request *DefaultApiStatusesOembedGetRequest, result *Tweets) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling StatusesOembedGet")
	}
	if !_client.NewValidator(_request.Url, _request.Url == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Url' when calling StatusesOembedGet")
	}
	if !_client.NewValidator(_request.Maxwidth, _request.Maxwidth == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Maxwidth' when calling StatusesOembedGet")
	}
	if !_client.NewValidator(_request.HideMedia, _request.HideMedia == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'HideMedia' when calling StatusesOembedGet")
	}
	if !_client.NewValidator(_request.HideThread, _request.HideThread == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'HideThread' when calling StatusesOembedGet")
	}
	if !_client.NewValidator(_request.Align, _request.Align == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Align' when calling StatusesOembedGet")
	}
	if !_client.NewValidator(_request.Related, _request.Related == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Related' when calling StatusesOembedGet")
	}
	if !_client.NewValidator(_request.Lang, _request.Lang == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lang' when calling StatusesOembedGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/oembed", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Id != nil {
		_client.AddQueryParam("id", utils.ParameterToString(_request.Id))
	}
	if _request.Url != nil {
		_client.AddQueryParam("url", utils.ParameterToString(_request.Url))
	}
	if _request.Maxwidth != nil {
		_client.AddQueryParam("maxwidth", utils.ParameterToString(_request.Maxwidth))
	}
	if _request.HideMedia != nil {
		_client.AddQueryParam("hide_media", utils.ParameterToString(_request.HideMedia))
	}
	if _request.HideThread != nil {
		_client.AddQueryParam("hide_thread", utils.ParameterToString(_request.HideThread))
	}
	if _request.Align != nil {
		_client.AddQueryParam("align", utils.ParameterToString(_request.Align))
	}
	if _request.Related != nil {
		_client.AddQueryParam("related", utils.ParameterToString(_request.Related))
	}
	if _request.Lang != nil {
		_client.AddQueryParam("lang", utils.ParameterToString(_request.Lang))
	}

	return _client.Fetch(result)
}

/*

   Retruns a collection of the 100 most recent retweets of the tweet specified by the id
*/
type DefaultApiStatusesRetweetsIdGetRequest struct {
	/*
	   The numerical ID of the desired status
	*/
	Id *string

	/*
	   Specifies the number of tweets to try and retrieve
	*/
	Count *string

	/*
	   When set to either true, t or 1, each tweet returned in a timeline will include a user object
	*/
	TrimUser *string
}

/*

   Retruns a collection of the 100 most recent retweets of the tweet specified by the id

     result: TweetsArray
*/
func (it *DefaultApi) StatusesRetweetsIdGet(_client swagger.FetchClient, _request *DefaultApiStatusesRetweetsIdGetRequest, result *TweetsArray) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling StatusesRetweetsIdGet")
	}
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling StatusesRetweetsIdGet")
	}
	if !_client.NewValidator(_request.TrimUser, _request.TrimUser == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrimUser' when calling StatusesRetweetsIdGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/retweets/{id}", "{format}", "json", -1)
		localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", utils.EscapeString(*_request.Id), -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}
	if _request.TrimUser != nil {
		_client.AddQueryParam("trim_user", utils.ParameterToString(_request.TrimUser))
	}

	return _client.Fetch(result)
}

/*

   Retweens a tweet
*/
type DefaultApiStatusesRetweetsIdPostRequest struct {
	/*
	   The numerical ID of the desired status
	*/
	Id *string

	/*
	   When set to either true, t or 1, each tweet returned in a timeline will include a user object
	*/
	TrimUser *string
}

/*

   Retweens a tweet

     result: Tweets
*/
func (it *DefaultApi) StatusesRetweetsIdPost(_client swagger.FetchClient, _request *DefaultApiStatusesRetweetsIdPostRequest, result *Tweets) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling StatusesRetweetsIdPost")
	}
	if !_client.NewValidator(_request.TrimUser, _request.TrimUser == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrimUser' when calling StatusesRetweetsIdPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/retweets/{id}", "{format}", "json", -1)
		localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", utils.EscapeString(*_request.Id), -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.TrimUser != nil {
		_client.AddQueryParam("trim_user", utils.ParameterToString(_request.TrimUser))
	}

	return _client.Fetch(result)
}

/*

   Retruns a single Tweet
*/
type DefaultApiStatusesShowIdGetRequest struct {
	/*
	   The numerical ID of the desired status
	*/
	Id *string

	/*
	   When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating
	*/
	IncludeMyRetweet *string

	/*
	   When set to either true, t or 1, each tweet returned in a timeline will include a user object
	*/
	TrimUser *string

	/*
	   The entities node will be disincluded when set to false
	*/
	IncludeEntities *string
}

/*

   Retruns a single Tweet

     result: Tweets
*/
func (it *DefaultApi) StatusesShowIdGet(_client swagger.FetchClient, _request *DefaultApiStatusesShowIdGetRequest, result *Tweets) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling StatusesShowIdGet")
	}
	if !_client.NewValidator(_request.IncludeMyRetweet, _request.IncludeMyRetweet == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeMyRetweet' when calling StatusesShowIdGet")
	}
	if !_client.NewValidator(_request.TrimUser, _request.TrimUser == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrimUser' when calling StatusesShowIdGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling StatusesShowIdGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/show/{id}", "{format}", "json", -1)
		localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", utils.EscapeString(*_request.Id), -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.TrimUser != nil {
		_client.AddQueryParam("trim_user", utils.ParameterToString(_request.TrimUser))
	}
	if _request.IncludeMyRetweet != nil {
		_client.AddQueryParam("include_my_retweet", utils.ParameterToString(_request.IncludeMyRetweet))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}

	return _client.Fetch(result)
}

/*

   Updates the authenticating user&#39;s status
*/
type DefaultApiStatusesUpdatePostRequest struct {
	/*
	   The text of your status update
	*/
	Status *string

	/*
	   The ID of an existing status
	*/
	InReplyToStatusId *string

	/*
	   The latitude of the location
	*/
	Lat *string

	/*
	   The longitude of the location
	*/
	Long *string

	/*
	   A place in the world
	*/
	PlaceId *string

	/*
	   Whether or not to put a pin on the exact coordinates a tweet
	*/
	DisplayCoordinates *string

	/*
	   When set to either true, t or 1, each tweet returned in a timeline will include a user object
	*/
	TrimUser *string
}

/*

   Updates the authenticating user&#39;s status

     result: Tweets
*/
func (it *DefaultApi) StatusesUpdatePost(_client swagger.FetchClient, _request *DefaultApiStatusesUpdatePostRequest, result *Tweets) error {
	if !_client.NewValidator(_request.Status, _request.Status == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Status' when calling StatusesUpdatePost")
	}
	if !_client.NewValidator(_request.InReplyToStatusId, _request.InReplyToStatusId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'InReplyToStatusId' when calling StatusesUpdatePost")
	}
	if !_client.NewValidator(_request.Lat, _request.Lat == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lat' when calling StatusesUpdatePost")
	}
	if !_client.NewValidator(_request.Long, _request.Long == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Long' when calling StatusesUpdatePost")
	}
	if !_client.NewValidator(_request.PlaceId, _request.PlaceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'PlaceId' when calling StatusesUpdatePost")
	}
	if !_client.NewValidator(_request.DisplayCoordinates, _request.DisplayCoordinates == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'DisplayCoordinates' when calling StatusesUpdatePost")
	}
	if !_client.NewValidator(_request.TrimUser, _request.TrimUser == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrimUser' when calling StatusesUpdatePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/update", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Status != nil {
		_client.AddQueryParam("status", utils.ParameterToString(_request.Status))
	}
	if _request.InReplyToStatusId != nil {
		_client.AddQueryParam("in_reply_to_status_id", utils.ParameterToString(_request.InReplyToStatusId))
	}
	if _request.Lat != nil {
		_client.AddQueryParam("lat", utils.ParameterToString(_request.Lat))
	}
	if _request.Long != nil {
		_client.AddQueryParam("long", utils.ParameterToString(_request.Long))
	}
	if _request.PlaceId != nil {
		_client.AddQueryParam("place_id", utils.ParameterToString(_request.PlaceId))
	}
	if _request.DisplayCoordinates != nil {
		_client.AddQueryParam("display_coordinates", utils.ParameterToString(_request.DisplayCoordinates))
	}
	if _request.TrimUser != nil {
		_client.AddQueryParam("trim_user", utils.ParameterToString(_request.TrimUser))
	}

	return _client.Fetch(result)
}

/*

   Returns a collection of the most recent Tweets posted by the User
*/
type DefaultApiStatusesUserTimelineGetRequest struct {
	/*
	   Specifies the number of tweets to try and retrieve
	*/
	Count *string

	/*
	   Returns result with an ID greater than the specified ID
	*/
	SinceId *string

	/*
	   Returns results with an ID less than or equal to the specified ID
	*/
	MaxId *string

	/*
	   When set to either true, t or 1, each tweet returned in a timeline will include a user object
	*/
	TrimUser *string

	/*
	   This paramters will prevent from appearing in the returned timeline
	*/
	ExcludeReplies *bool

	/*
	   This paramters enhances the contributors element of the status response to include the screen_name of the contributor
	*/
	ContributorDetails *bool

	/*
	   When set to false, the timeline will strip any native retweet
	*/
	IncludeRts *bool
}

/*

   Returns a collection of the most recent Tweets posted by the User

     result: TweetsArray
*/
func (it *DefaultApi) StatusesUserTimelineGet(_client swagger.FetchClient, _request *DefaultApiStatusesUserTimelineGetRequest, result *TweetsArray) error {
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling StatusesUserTimelineGet")
	}
	if !_client.NewValidator(_request.SinceId, _request.SinceId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SinceId' when calling StatusesUserTimelineGet")
	}
	if !_client.NewValidator(_request.MaxId, _request.MaxId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'MaxId' when calling StatusesUserTimelineGet")
	}
	if !_client.NewValidator(_request.TrimUser, _request.TrimUser == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'TrimUser' when calling StatusesUserTimelineGet")
	}
	if !_client.NewValidator(_request.ExcludeReplies, _request.ExcludeReplies == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ExcludeReplies' when calling StatusesUserTimelineGet")
	}
	if !_client.NewValidator(_request.ContributorDetails, _request.ContributorDetails == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ContributorDetails' when calling StatusesUserTimelineGet")
	}
	if !_client.NewValidator(_request.IncludeRts, _request.IncludeRts == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeRts' when calling StatusesUserTimelineGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/statuses/user_timeline", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}
	if _request.SinceId != nil {
		_client.AddQueryParam("since_id", utils.ParameterToString(_request.SinceId))
	}
	if _request.MaxId != nil {
		_client.AddQueryParam("max_id", utils.ParameterToString(_request.MaxId))
	}
	if _request.TrimUser != nil {
		_client.AddQueryParam("trim_user", utils.ParameterToString(_request.TrimUser))
	}
	if _request.ExcludeReplies != nil {
		_client.AddQueryParam("exclude_replies", utils.ParameterToString(_request.ExcludeReplies))
	}
	if _request.ContributorDetails != nil {
		_client.AddQueryParam("contributor_details", utils.ParameterToString(_request.ContributorDetails))
	}
	if _request.IncludeRts != nil {
		_client.AddQueryParam("include_rts", utils.ParameterToString(_request.IncludeRts))
	}

	return _client.Fetch(result)
}

/*

   Returns the availability
*/
type DefaultApiTrendsAvailableGetRequest struct {
}

/*

   Returns the availability

     result: LocationArray
*/
func (it *DefaultApi) TrendsAvailableGet(_client swagger.FetchClient, _request *DefaultApiTrendsAvailableGetRequest, result *LocationArray) error {

	// create path and map variables
	{
		localVarPath := strings.Replace("/trends/available", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	return _client.Fetch(result)
}

/*

   Returns the location that Twitter has trending topic information for
*/
type DefaultApiTrendsClosestGetRequest struct {
	/*
	   If provided with a long parameter the available trend locations wil be stored by distance
	*/
	Lat *string

	/*
	   If provided with a lat parameters the available trend locations will be sorted by distance
	*/
	Long *string
}

/*

   Returns the location that Twitter has trending topic information for

     result: LocationArray
*/
func (it *DefaultApi) TrendsClosestGet(_client swagger.FetchClient, _request *DefaultApiTrendsClosestGetRequest, result *LocationArray) error {
	if !_client.NewValidator(_request.Lat, _request.Lat == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Lat' when calling TrendsClosestGet")
	}
	if !_client.NewValidator(_request.Long, _request.Long == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Long' when calling TrendsClosestGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/trends/closest", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Lat != nil {
		_client.AddQueryParam("lat", utils.ParameterToString(_request.Lat))
	}
	if _request.Long != nil {
		_client.AddQueryParam("long", utils.ParameterToString(_request.Long))
	}

	return _client.Fetch(result)
}

/*

   Returns the top 10 trending topics for a specific WOEID
*/
type DefaultApiTrendsPlaceGetRequest struct {
	/*
	   The yahoo where on earch id
	*/
	Id *string

	/*
	   Setting this equal to hashtages will remove all hashtages from the trends list
	*/
	Exclude *string
}

/*

   Returns the top 10 trending topics for a specific WOEID

     result: TrendInfo
*/
func (it *DefaultApi) TrendsPlaceGet(_client swagger.FetchClient, _request *DefaultApiTrendsPlaceGetRequest, result *TrendInfo) error {
	if !_client.NewValidator(_request.Id, _request.Id == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Id' when calling TrendsPlaceGet")
	}
	if !_client.NewValidator(_request.Exclude, _request.Exclude == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Exclude' when calling TrendsPlaceGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/trends/place", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Id != nil {
		_client.AddQueryParam("id", utils.ParameterToString(_request.Id))
	}
	if _request.Exclude != nil {
		_client.AddQueryParam("exclude", utils.ParameterToString(_request.Exclude))
	}

	return _client.Fetch(result)
}

/*
   collection of users specified user can contribute to
   collection of users specified user can contribute to
*/
type DefaultApiUsersContributeesGetRequest struct {
	/*
	   screen name of user that is contributed to
	*/
	ScreenName *string

	/*
	   ID of user to that is contributed to
	*/
	UserId *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to skip statuses
	*/
	SkipStatus *string
}

/*
   collection of users specified user can contribute to
   collection of users specified user can contribute to

     result: UsersArray
*/
func (it *DefaultApi) UsersContributeesGet(_client swagger.FetchClient, _request *DefaultApiUsersContributeesGetRequest, result *UsersArray) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling UsersContributeesGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling UsersContributeesGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling UsersContributeesGet")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling UsersContributeesGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/users/contributees", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*
   collection of users that can contribute to specified account
   collection of users that can contribute to specified account
*/
type DefaultApiUsersContributorsGetRequest struct {
	/*
	   screen name of user contributing
	*/
	ScreenName *string

	/*
	   ID of user contributing
	*/
	UserId *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string

	/*
	   whether or not to skip statuses
	*/
	SkipStatus *string
}

/*
   collection of users that can contribute to specified account
   collection of users that can contribute to specified account

     result: UsersArray
*/
func (it *DefaultApi) UsersContributorsGet(_client swagger.FetchClient, _request *DefaultApiUsersContributorsGetRequest, result *UsersArray) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling UsersContributorsGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling UsersContributorsGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling UsersContributorsGet")
	}
	if !_client.NewValidator(_request.SkipStatus, _request.SkipStatus == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'SkipStatus' when calling UsersContributorsGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/users/contributors", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}
	if _request.SkipStatus != nil {
		_client.AddQueryParam("skip_status", utils.ParameterToString(_request.SkipStatus))
	}

	return _client.Fetch(result)
}

/*
   returns fully-hydrated user objects up to 100
   returns fully-hydrated user objects up to 100
*/
type DefaultApiUsersLookupGetRequest struct {
	/*
	   screen name of user to lookup
	*/
	ScreenName *string

	/*
	   ID of user to lookup
	*/
	UserId *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string
}

/*
   returns fully-hydrated user objects up to 100
   returns fully-hydrated user objects up to 100

     result: UsersArray
*/
func (it *DefaultApi) UsersLookupGet(_client swagger.FetchClient, _request *DefaultApiUsersLookupGetRequest, result *UsersArray) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling UsersLookupGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling UsersLookupGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling UsersLookupGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/users/lookup", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}

	return _client.Fetch(result)
}

/*

   Returna users report spam
*/
type DefaultApiUsersReportSpamPostRequest struct {
	/*
	   The ID or screen_name of the user you want to report as a spammer
	*/
	ScreenName *string

	/*
	   The ID of the user you want to report as a spammer
	*/
	UserId *string
}

/*

   Returna users report spam

     result: Users
*/
func (it *DefaultApi) UsersReportSpamPost(_client swagger.FetchClient, _request *DefaultApiUsersReportSpamPostRequest, result *Users) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling UsersReportSpamPost")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling UsersReportSpamPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/users/report_spam", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}

	return _client.Fetch(result)
}

/*
   simple relevance-based user search
   simple relevance-based user search
*/
type DefaultApiUsersSearchGetRequest struct {
	/*
	   the search query to run against people search
	*/
	Q *string

	/*
	   specifies the page of results to receive
	*/
	Page *string

	/*
	   number of people to return per page
	*/
	Count *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string
}

/*
   simple relevance-based user search
   simple relevance-based user search

     result: UsersArray
*/
func (it *DefaultApi) UsersSearchGet(_client swagger.FetchClient, _request *DefaultApiUsersSearchGetRequest, result *UsersArray) error {
	if !_client.NewValidator(_request.Q, _request.Q == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Q' when calling UsersSearchGet")
	}
	if !_client.NewValidator(_request.Page, _request.Page == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Page' when calling UsersSearchGet")
	}
	if !_client.NewValidator(_request.Count, _request.Count == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'Count' when calling UsersSearchGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling UsersSearchGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/users/search", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Q != nil {
		_client.AddQueryParam("q", utils.ParameterToString(_request.Q))
	}
	if _request.Page != nil {
		_client.AddQueryParam("page", utils.ParameterToString(_request.Page))
	}
	if _request.Count != nil {
		_client.AddQueryParam("count", utils.ParameterToString(_request.Count))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}

	return _client.Fetch(result)
}

/*
   returns a variety of info about specified user
   returns a variety of info about specified user
*/
type DefaultApiUsersShowGetRequest struct {
	/*
	   screen name of user to be shown
	*/
	ScreenName *string

	/*
	   ID of user to be shown
	*/
	UserId *string

	/*
	   whether or not to include entities
	*/
	IncludeEntities *string
}

/*
   returns a variety of info about specified user
   returns a variety of info about specified user

     result: Users
*/
func (it *DefaultApi) UsersShowGet(_client swagger.FetchClient, _request *DefaultApiUsersShowGetRequest, result *Users) error {
	if !_client.NewValidator(_request.ScreenName, _request.ScreenName == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'ScreenName' when calling UsersShowGet")
	}
	if !_client.NewValidator(_request.UserId, _request.UserId == nil).Required(true).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'UserId' when calling UsersShowGet")
	}
	if !_client.NewValidator(_request.IncludeEntities, _request.IncludeEntities == nil).Valid(_client) {
		return errors.New(0, "Missing the required parameter 'IncludeEntities' when calling UsersShowGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/users/show", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.ScreenName != nil {
		_client.AddQueryParam("screen_name", utils.ParameterToString(_request.ScreenName))
	}
	if _request.UserId != nil {
		_client.AddQueryParam("user_id", utils.ParameterToString(_request.UserId))
	}
	if _request.IncludeEntities != nil {
		_client.AddQueryParam("include_entities", utils.ParameterToString(_request.IncludeEntities))
	}

	return _client.Fetch(result)
}

func (it *DefaultApi) this_is_call_dummy() {
	v := url.Values{}
	v.Add("Key", "Value")

	errors.New(0, "stub")
	strings.ToUpper("")
}
