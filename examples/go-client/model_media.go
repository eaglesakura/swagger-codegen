package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Media struct {
	DisplayUrl *string `json:"display_url,omitempty"`

	ExpandedUrl *string `json:"expanded_url,omitempty"`

	Id *int32 `json:"id,omitempty"`

	IdStr *string `json:"id_str,omitempty"`

	Indices *[]int32 `json:"indices,omitempty"`

	MediaUrl *string `json:"media_url,omitempty"`

	MediaUrlHttps *string `json:"media_url_https,omitempty"`

	Sizes *Sizes `json:"sizes,omitempty"`

	SourceStatusId *int32 `json:"source_status_id,omitempty"`

	SourceStatusIdStr *int32 `json:"source_status_id_str,omitempty"`

	Type_ *string `json:"type,omitempty"`

	Url *string `json:"url,omitempty"`
}

// encode to json
func (it Media) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type MediaArray []Media

func (it *Media) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.DisplayUrl, it.DisplayUrl == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.ExpandedUrl, it.ExpandedUrl == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.IdStr, it.IdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Indices, it.Indices == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.MediaUrl, it.MediaUrl == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.MediaUrlHttps, it.MediaUrlHttps == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Sizes, it.Sizes == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.SourceStatusId, it.SourceStatusId == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.SourceStatusIdStr, it.SourceStatusIdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Type_, it.Type_ == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Url, it.Url == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Media) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *MediaArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.DisplayUrl, it.DisplayUrl == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.ExpandedUrl, it.ExpandedUrl == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.IdStr, it.IdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Indices, it.Indices == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.MediaUrl, it.MediaUrl == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.MediaUrlHttps, it.MediaUrlHttps == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Sizes, it.Sizes == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.SourceStatusId, it.SourceStatusId == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.SourceStatusIdStr, it.SourceStatusIdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Type_, it.Type_ == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Url, it.Url == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *MediaArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
