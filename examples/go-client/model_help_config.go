package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type HelpConfig struct {
	DmTextCharacterLimit *int32 `json:"dm_text_character_limit,omitempty"`

	CharactersReservedPerMedia *int32 `json:"characters_reserved_per_media,omitempty"`

	MaxMediaPerUpload *int32 `json:"max_media_per_upload,omitempty"`

	NonUsernamePaths *[]string `json:"non_username_paths,omitempty"`

	PhotoSizeLimit *int32 `json:"photo_size_limit,omitempty"`

	PhotoSizes *Sizes `json:"photo_sizes,omitempty"`
}

// encode to json
func (it HelpConfig) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type HelpConfigArray []HelpConfig

func (it *HelpConfig) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.DmTextCharacterLimit, it.DmTextCharacterLimit == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.CharactersReservedPerMedia, it.CharactersReservedPerMedia == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.MaxMediaPerUpload, it.MaxMediaPerUpload == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.NonUsernamePaths, it.NonUsernamePaths == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.PhotoSizeLimit, it.PhotoSizeLimit == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.PhotoSizes, it.PhotoSizes == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *HelpConfig) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *HelpConfigArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.DmTextCharacterLimit, it.DmTextCharacterLimit == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.CharactersReservedPerMedia, it.CharactersReservedPerMedia == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.MaxMediaPerUpload, it.MaxMediaPerUpload == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.NonUsernamePaths, it.NonUsernamePaths == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.PhotoSizeLimit, it.PhotoSizeLimit == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.PhotoSizes, it.PhotoSizes == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *HelpConfigArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
