package golang_package_name

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

//
type Lists struct {
	CreatedAt *string `json:"created_at,omitempty"`

	Slug *string `json:"slug,omitempty"`

	Name *string `json:"name,omitempty"`

	Description *string `json:"description,omitempty"`

	Mode *string `json:"mode,omitempty"`

	Following *bool `json:"following,omitempty"`

	User *Users `json:"user,omitempty"`

	MemberCount *int32 `json:"member_count,omitempty"`

	IdStr *string `json:"id_str,omitempty"`

	SubscriberCount *int32 `json:"subscriber_count,omitempty"`

	Id *int32 `json:"id,omitempty"`

	Uri *string `json:"uri,omitempty"`
}

// encode to json
func (it Lists) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type ListsArray []Lists

func (it *Lists) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.CreatedAt, it.CreatedAt == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Slug, it.Slug == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Name, it.Name == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Description, it.Description == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Mode, it.Mode == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Following, it.Following == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.User, it.User == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.MemberCount, it.MemberCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.IdStr, it.IdStr == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.SubscriberCount, it.SubscriberCount == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Uri, it.Uri == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *Lists) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *ListsArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.CreatedAt, it.CreatedAt == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Slug, it.Slug == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Name, it.Name == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Description, it.Description == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Mode, it.Mode == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Following, it.Following == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.User, it.User == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.MemberCount, it.MemberCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.IdStr, it.IdStr == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.SubscriberCount, it.SubscriberCount == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Uri, it.Uri == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *ListsArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
